// Code generated by pigeon; DO NOT EDIT.

/*
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *  http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

package nodes

import (
	"bytes"
	"errors"
	"fmt"
	"io"
	"io/ioutil"
	"math"
	"os"
	"sort"
	"strconv"
	"strings"
	"sync"
	"unicode"
	"unicode/utf8"

	"github.com/markel1974/gokuery/src/config"
)

var g = &grammar{
	rules: []*rule{
		{
			name: "start",
			pos:  position{line: 35, col: 1, offset: 715},
			expr: &actionExpr{
				pos: position{line: 36, col: 5, offset: 725},
				run: (*parser).callonstart1,
				expr: &seqExpr{
					pos: position{line: 36, col: 5, offset: 725},
					exprs: []interface{}{
						&zeroOrMoreExpr{
							pos: position{line: 36, col: 5, offset: 725},
							expr: &ruleRefExpr{
								pos:  position{line: 36, col: 5, offset: 725},
								name: "Space",
							},
						},
						&labeledExpr{
							pos:   position{line: 36, col: 12, offset: 732},
							label: "query",
							expr: &zeroOrOneExpr{
								pos: position{line: 36, col: 18, offset: 738},
								expr: &ruleRefExpr{
									pos:  position{line: 36, col: 18, offset: 738},
									name: "OrQuery",
								},
							},
						},
						&labeledExpr{
							pos:   position{line: 36, col: 27, offset: 747},
							label: "trailing",
							expr: &ruleRefExpr{
								pos:  position{line: 36, col: 36, offset: 756},
								name: "OptionalSpace",
							},
						},
					},
				},
			},
		},
		{
			name: "OrQuery",
			pos:  position{line: 67, col: 1, offset: 1625},
			expr: &choiceExpr{
				pos: position{line: 68, col: 5, offset: 1637},
				alternatives: []interface{}{
					&seqExpr{
						pos: position{line: 68, col: 5, offset: 1637},
						exprs: []interface{}{
							&andCodeExpr{
								pos: position{line: 68, col: 5, offset: 1637},
								run: (*parser).callonOrQuery3,
							},
							&ruleRefExpr{
								pos:  position{line: 68, col: 67, offset: 1699},
								name: "LuceneQuery",
							},
						},
					},
					&actionExpr{
						pos: position{line: 69, col: 5, offset: 1715},
						run: (*parser).callonOrQuery5,
						expr: &seqExpr{
							pos: position{line: 69, col: 5, offset: 1715},
							exprs: []interface{}{
								&labeledExpr{
									pos:   position{line: 69, col: 5, offset: 1715},
									label: "left",
									expr: &ruleRefExpr{
										pos:  position{line: 69, col: 10, offset: 1720},
										name: "AndQuery",
									},
								},
								&ruleRefExpr{
									pos:  position{line: 69, col: 19, offset: 1729},
									name: "Or",
								},
								&labeledExpr{
									pos:   position{line: 69, col: 22, offset: 1732},
									label: "right",
									expr: &ruleRefExpr{
										pos:  position{line: 69, col: 28, offset: 1738},
										name: "OrQuery",
									},
								},
							},
						},
					},
					&ruleRefExpr{
						pos:  position{line: 86, col: 5, offset: 2230},
						name: "AndQuery",
					},
				},
			},
		},
		{
			name: "AndQuery",
			pos:  position{line: 88, col: 1, offset: 2240},
			expr: &choiceExpr{
				pos: position{line: 89, col: 5, offset: 2253},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 89, col: 5, offset: 2253},
						run: (*parser).callonAndQuery2,
						expr: &seqExpr{
							pos: position{line: 89, col: 5, offset: 2253},
							exprs: []interface{}{
								&labeledExpr{
									pos:   position{line: 89, col: 5, offset: 2253},
									label: "left",
									expr: &ruleRefExpr{
										pos:  position{line: 89, col: 10, offset: 2258},
										name: "NotQuery",
									},
								},
								&ruleRefExpr{
									pos:  position{line: 89, col: 19, offset: 2267},
									name: "And",
								},
								&labeledExpr{
									pos:   position{line: 89, col: 23, offset: 2271},
									label: "right",
									expr: &ruleRefExpr{
										pos:  position{line: 89, col: 29, offset: 2277},
										name: "AndQuery",
									},
								},
							},
						},
					},
					&ruleRefExpr{
						pos:  position{line: 107, col: 5, offset: 2828},
						name: "NotQuery",
					},
				},
			},
		},
		{
			name: "NotQuery",
			pos:  position{line: 109, col: 1, offset: 2838},
			expr: &choiceExpr{
				pos: position{line: 110, col: 5, offset: 2851},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 110, col: 5, offset: 2851},
						run: (*parser).callonNotQuery2,
						expr: &seqExpr{
							pos: position{line: 110, col: 5, offset: 2851},
							exprs: []interface{}{
								&ruleRefExpr{
									pos:  position{line: 110, col: 5, offset: 2851},
									name: "Not",
								},
								&labeledExpr{
									pos:   position{line: 110, col: 9, offset: 2855},
									label: "query",
									expr: &ruleRefExpr{
										pos:  position{line: 110, col: 15, offset: 2861},
										name: "SubQuery",
									},
								},
							},
						},
					},
					&ruleRefExpr{
						pos:  position{line: 122, col: 5, offset: 3220},
						name: "SubQuery",
					},
				},
			},
		},
		{
			name: "SubQuery",
			pos:  position{line: 124, col: 1, offset: 3230},
			expr: &choiceExpr{
				pos: position{line: 125, col: 5, offset: 3243},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 125, col: 5, offset: 3243},
						run: (*parser).callonSubQuery2,
						expr: &seqExpr{
							pos: position{line: 125, col: 5, offset: 3243},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 125, col: 5, offset: 3243},
									val:        "(",
									ignoreCase: false,
									want:       "\"(\"",
								},
								&zeroOrMoreExpr{
									pos: position{line: 125, col: 9, offset: 3247},
									expr: &ruleRefExpr{
										pos:  position{line: 125, col: 9, offset: 3247},
										name: "Space",
									},
								},
								&labeledExpr{
									pos:   position{line: 125, col: 16, offset: 3254},
									label: "query",
									expr: &ruleRefExpr{
										pos:  position{line: 125, col: 22, offset: 3260},
										name: "OrQuery",
									},
								},
								&labeledExpr{
									pos:   position{line: 125, col: 30, offset: 3268},
									label: "trailing",
									expr: &ruleRefExpr{
										pos:  position{line: 125, col: 39, offset: 3277},
										name: "OptionalSpace",
									},
								},
								&litMatcher{
									pos:        position{line: 125, col: 53, offset: 3291},
									val:        ")",
									ignoreCase: false,
									want:       "\")\"",
								},
							},
						},
					},
					&ruleRefExpr{
						pos:  position{line: 142, col: 5, offset: 3761},
						name: "NestedQuery",
					},
				},
			},
		},
		{
			name: "NestedQuery",
			pos:  position{line: 144, col: 1, offset: 3774},
			expr: &choiceExpr{
				pos: position{line: 145, col: 5, offset: 3790},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 145, col: 5, offset: 3790},
						run: (*parser).callonNestedQuery2,
						expr: &seqExpr{
							pos: position{line: 145, col: 5, offset: 3790},
							exprs: []interface{}{
								&labeledExpr{
									pos:   position{line: 145, col: 5, offset: 3790},
									label: "field",
									expr: &ruleRefExpr{
										pos:  position{line: 145, col: 11, offset: 3796},
										name: "Field",
									},
								},
								&zeroOrMoreExpr{
									pos: position{line: 145, col: 17, offset: 3802},
									expr: &ruleRefExpr{
										pos:  position{line: 145, col: 17, offset: 3802},
										name: "Space",
									},
								},
								&litMatcher{
									pos:        position{line: 145, col: 24, offset: 3809},
									val:        ":",
									ignoreCase: false,
									want:       "\":\"",
								},
								&zeroOrMoreExpr{
									pos: position{line: 145, col: 28, offset: 3813},
									expr: &ruleRefExpr{
										pos:  position{line: 145, col: 28, offset: 3813},
										name: "Space",
									},
								},
								&litMatcher{
									pos:        position{line: 145, col: 35, offset: 3820},
									val:        "{",
									ignoreCase: false,
									want:       "\"{\"",
								},
								&zeroOrMoreExpr{
									pos: position{line: 145, col: 39, offset: 3824},
									expr: &ruleRefExpr{
										pos:  position{line: 145, col: 39, offset: 3824},
										name: "Space",
									},
								},
								&labeledExpr{
									pos:   position{line: 145, col: 46, offset: 3831},
									label: "query",
									expr: &ruleRefExpr{
										pos:  position{line: 145, col: 52, offset: 3837},
										name: "OrQuery",
									},
								},
								&labeledExpr{
									pos:   position{line: 145, col: 60, offset: 3845},
									label: "trailing",
									expr: &ruleRefExpr{
										pos:  position{line: 145, col: 69, offset: 3854},
										name: "OptionalSpace",
									},
								},
								&litMatcher{
									pos:        position{line: 145, col: 83, offset: 3868},
									val:        "}",
									ignoreCase: false,
									want:       "\"}\"",
								},
							},
						},
					},
					&ruleRefExpr{
						pos:  position{line: 187, col: 7, offset: 5014},
						name: "Expression",
					},
				},
			},
		},
		{
			name: "Expression",
			pos:  position{line: 189, col: 1, offset: 5026},
			expr: &choiceExpr{
				pos: position{line: 190, col: 5, offset: 5041},
				alternatives: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 190, col: 5, offset: 5041},
						name: "FieldRangeExpression",
					},
					&ruleRefExpr{
						pos:  position{line: 191, col: 5, offset: 5066},
						name: "FieldValueExpression",
					},
					&ruleRefExpr{
						pos:  position{line: 192, col: 5, offset: 5091},
						name: "ValueExpression",
					},
				},
			},
		},
		{
			name:        "Field",
			displayName: "\"fieldName\"",
			pos:         position{line: 194, col: 1, offset: 5108},
			expr: &ruleRefExpr{
				pos:  position{line: 195, col: 5, offset: 5130},
				name: "Literal",
			},
		},
		{
			name: "FieldRangeExpression",
			pos:  position{line: 197, col: 1, offset: 5139},
			expr: &actionExpr{
				pos: position{line: 198, col: 5, offset: 5164},
				run: (*parser).callonFieldRangeExpression1,
				expr: &seqExpr{
					pos: position{line: 198, col: 5, offset: 5164},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 198, col: 5, offset: 5164},
							label: "field",
							expr: &ruleRefExpr{
								pos:  position{line: 198, col: 11, offset: 5170},
								name: "Field",
							},
						},
						&zeroOrMoreExpr{
							pos: position{line: 198, col: 17, offset: 5176},
							expr: &ruleRefExpr{
								pos:  position{line: 198, col: 17, offset: 5176},
								name: "Space",
							},
						},
						&labeledExpr{
							pos:   position{line: 198, col: 24, offset: 5183},
							label: "operator",
							expr: &ruleRefExpr{
								pos:  position{line: 198, col: 33, offset: 5192},
								name: "RangeOperator",
							},
						},
						&zeroOrMoreExpr{
							pos: position{line: 198, col: 47, offset: 5206},
							expr: &ruleRefExpr{
								pos:  position{line: 198, col: 47, offset: 5206},
								name: "Space",
							},
						},
						&labeledExpr{
							pos:   position{line: 198, col: 54, offset: 5213},
							label: "value",
							expr: &ruleRefExpr{
								pos:  position{line: 198, col: 60, offset: 5219},
								name: "Literal",
							},
						},
					},
				},
			},
		},
		{
			name: "FieldValueExpression",
			pos:  position{line: 227, col: 1, offset: 6015},
			expr: &actionExpr{
				pos: position{line: 228, col: 5, offset: 6040},
				run: (*parser).callonFieldValueExpression1,
				expr: &seqExpr{
					pos: position{line: 228, col: 5, offset: 6040},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 228, col: 5, offset: 6040},
							label: "field",
							expr: &ruleRefExpr{
								pos:  position{line: 228, col: 11, offset: 6046},
								name: "Field",
							},
						},
						&zeroOrMoreExpr{
							pos: position{line: 228, col: 17, offset: 6052},
							expr: &ruleRefExpr{
								pos:  position{line: 228, col: 17, offset: 6052},
								name: "Space",
							},
						},
						&litMatcher{
							pos:        position{line: 228, col: 24, offset: 6059},
							val:        ":",
							ignoreCase: false,
							want:       "\":\"",
						},
						&zeroOrMoreExpr{
							pos: position{line: 228, col: 28, offset: 6063},
							expr: &ruleRefExpr{
								pos:  position{line: 228, col: 28, offset: 6063},
								name: "Space",
							},
						},
						&labeledExpr{
							pos:   position{line: 228, col: 35, offset: 6070},
							label: "partial",
							expr: &ruleRefExpr{
								pos:  position{line: 228, col: 43, offset: 6078},
								name: "ListOfValues",
							},
						},
					},
				},
			},
		},
		{
			name: "ValueExpression",
			pos:  position{line: 260, col: 1, offset: 6835},
			expr: &actionExpr{
				pos: position{line: 261, col: 5, offset: 6855},
				run: (*parser).callonValueExpression1,
				expr: &labeledExpr{
					pos:   position{line: 261, col: 5, offset: 6855},
					label: "partial",
					expr: &ruleRefExpr{
						pos:  position{line: 261, col: 13, offset: 6863},
						name: "Value",
					},
				},
			},
		},
		{
			name: "ListOfValues",
			pos:  position{line: 293, col: 1, offset: 7737},
			expr: &choiceExpr{
				pos: position{line: 294, col: 5, offset: 7754},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 294, col: 5, offset: 7754},
						run: (*parser).callonListOfValues2,
						expr: &seqExpr{
							pos: position{line: 294, col: 5, offset: 7754},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 294, col: 5, offset: 7754},
									val:        "(",
									ignoreCase: false,
									want:       "\"(\"",
								},
								&zeroOrMoreExpr{
									pos: position{line: 294, col: 9, offset: 7758},
									expr: &ruleRefExpr{
										pos:  position{line: 294, col: 9, offset: 7758},
										name: "Space",
									},
								},
								&labeledExpr{
									pos:   position{line: 294, col: 16, offset: 7765},
									label: "partial",
									expr: &ruleRefExpr{
										pos:  position{line: 294, col: 24, offset: 7773},
										name: "OrListOfValues",
									},
								},
								&labeledExpr{
									pos:   position{line: 294, col: 39, offset: 7788},
									label: "trailing",
									expr: &ruleRefExpr{
										pos:  position{line: 294, col: 48, offset: 7797},
										name: "OptionalSpace",
									},
								},
								&litMatcher{
									pos:        position{line: 294, col: 62, offset: 7811},
									val:        ")",
									ignoreCase: false,
									want:       "\")\"",
								},
							},
						},
					},
					&ruleRefExpr{
						pos:  position{line: 313, col: 5, offset: 8285},
						name: "Value",
					},
				},
			},
		},
		{
			name: "OrListOfValues",
			pos:  position{line: 315, col: 1, offset: 8292},
			expr: &choiceExpr{
				pos: position{line: 316, col: 5, offset: 8311},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 316, col: 5, offset: 8311},
						run: (*parser).callonOrListOfValues2,
						expr: &seqExpr{
							pos: position{line: 316, col: 5, offset: 8311},
							exprs: []interface{}{
								&labeledExpr{
									pos:   position{line: 316, col: 5, offset: 8311},
									label: "partialLeft",
									expr: &ruleRefExpr{
										pos:  position{line: 316, col: 17, offset: 8323},
										name: "AndListOfValues",
									},
								},
								&ruleRefExpr{
									pos:  position{line: 316, col: 33, offset: 8339},
									name: "Or",
								},
								&labeledExpr{
									pos:   position{line: 316, col: 36, offset: 8342},
									label: "partialRight",
									expr: &ruleRefExpr{
										pos:  position{line: 316, col: 49, offset: 8355},
										name: "OrListOfValues",
									},
								},
							},
						},
					},
					&ruleRefExpr{
						pos:  position{line: 356, col: 5, offset: 9425},
						name: "AndListOfValues",
					},
				},
			},
		},
		{
			name: "AndListOfValues",
			pos:  position{line: 358, col: 1, offset: 9442},
			expr: &choiceExpr{
				pos: position{line: 359, col: 5, offset: 9462},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 359, col: 5, offset: 9462},
						run: (*parser).callonAndListOfValues2,
						expr: &seqExpr{
							pos: position{line: 359, col: 5, offset: 9462},
							exprs: []interface{}{
								&labeledExpr{
									pos:   position{line: 359, col: 5, offset: 9462},
									label: "partialLeft",
									expr: &ruleRefExpr{
										pos:  position{line: 359, col: 17, offset: 9474},
										name: "NotListOfValues",
									},
								},
								&ruleRefExpr{
									pos:  position{line: 359, col: 33, offset: 9490},
									name: "And",
								},
								&labeledExpr{
									pos:   position{line: 359, col: 37, offset: 9494},
									label: "partialRight",
									expr: &ruleRefExpr{
										pos:  position{line: 359, col: 50, offset: 9507},
										name: "AndListOfValues",
									},
								},
							},
						},
					},
					&ruleRefExpr{
						pos:  position{line: 399, col: 5, offset: 10621},
						name: "NotListOfValues",
					},
				},
			},
		},
		{
			name: "NotListOfValues",
			pos:  position{line: 401, col: 1, offset: 10638},
			expr: &choiceExpr{
				pos: position{line: 402, col: 5, offset: 10658},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 402, col: 5, offset: 10658},
						run: (*parser).callonNotListOfValues2,
						expr: &seqExpr{
							pos: position{line: 402, col: 5, offset: 10658},
							exprs: []interface{}{
								&ruleRefExpr{
									pos:  position{line: 402, col: 5, offset: 10658},
									name: "Not",
								},
								&labeledExpr{
									pos:   position{line: 402, col: 9, offset: 10662},
									label: "partial",
									expr: &ruleRefExpr{
										pos:  position{line: 402, col: 17, offset: 10670},
										name: "ListOfValues",
									},
								},
							},
						},
					},
					&ruleRefExpr{
						pos:  position{line: 429, col: 5, offset: 11365},
						name: "ListOfValues",
					},
				},
			},
		},
		{
			name:        "Value",
			displayName: "\"value\"",
			pos:         position{line: 431, col: 1, offset: 11379},
			expr: &choiceExpr{
				pos: position{line: 432, col: 5, offset: 11397},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 432, col: 5, offset: 11397},
						run: (*parser).callonValue2,
						expr: &labeledExpr{
							pos:   position{line: 432, col: 5, offset: 11397},
							label: "value",
							expr: &ruleRefExpr{
								pos:  position{line: 432, col: 11, offset: 11403},
								name: "QuotedString",
							},
						},
					},
					&actionExpr{
						pos: position{line: 450, col: 5, offset: 11883},
						run: (*parser).callonValue5,
						expr: &labeledExpr{
							pos:   position{line: 450, col: 5, offset: 11883},
							label: "value",
							expr: &ruleRefExpr{
								pos:  position{line: 450, col: 11, offset: 11889},
								name: "UnquotedLiteral",
							},
						},
					},
				},
			},
		},
		{
			name:        "Or",
			displayName: "\"OR\"",
			pos:         position{line: 490, col: 1, offset: 13015},
			expr: &choiceExpr{
				pos: position{line: 491, col: 5, offset: 13027},
				alternatives: []interface{}{
					&seqExpr{
						pos: position{line: 491, col: 5, offset: 13027},
						exprs: []interface{}{
							&oneOrMoreExpr{
								pos: position{line: 491, col: 5, offset: 13027},
								expr: &ruleRefExpr{
									pos:  position{line: 491, col: 5, offset: 13027},
									name: "Space",
								},
							},
							&litMatcher{
								pos:        position{line: 491, col: 12, offset: 13034},
								val:        "or",
								ignoreCase: true,
								want:       "\"or\"i",
							},
							&oneOrMoreExpr{
								pos: position{line: 491, col: 18, offset: 13040},
								expr: &ruleRefExpr{
									pos:  position{line: 491, col: 18, offset: 13040},
									name: "Space",
								},
							},
						},
					},
					&seqExpr{
						pos: position{line: 492, col: 5, offset: 13051},
						exprs: []interface{}{
							&andCodeExpr{
								pos: position{line: 492, col: 5, offset: 13051},
								run: (*parser).callonOr9,
							},
							&ruleRefExpr{
								pos:  position{line: 492, col: 68, offset: 13114},
								name: "LuceneOr",
							},
						},
					},
				},
			},
		},
		{
			name:        "And",
			displayName: "\"AND\"",
			pos:         position{line: 494, col: 1, offset: 13124},
			expr: &choiceExpr{
				pos: position{line: 495, col: 5, offset: 13138},
				alternatives: []interface{}{
					&seqExpr{
						pos: position{line: 495, col: 5, offset: 13138},
						exprs: []interface{}{
							&oneOrMoreExpr{
								pos: position{line: 495, col: 5, offset: 13138},
								expr: &ruleRefExpr{
									pos:  position{line: 495, col: 5, offset: 13138},
									name: "Space",
								},
							},
							&litMatcher{
								pos:        position{line: 495, col: 12, offset: 13145},
								val:        "and",
								ignoreCase: true,
								want:       "\"and\"i",
							},
							&oneOrMoreExpr{
								pos: position{line: 495, col: 19, offset: 13152},
								expr: &ruleRefExpr{
									pos:  position{line: 495, col: 19, offset: 13152},
									name: "Space",
								},
							},
						},
					},
					&seqExpr{
						pos: position{line: 496, col: 5, offset: 13163},
						exprs: []interface{}{
							&andCodeExpr{
								pos: position{line: 496, col: 5, offset: 13163},
								run: (*parser).callonAnd9,
							},
							&ruleRefExpr{
								pos:  position{line: 496, col: 68, offset: 13226},
								name: "LuceneAnd",
							},
						},
					},
				},
			},
		},
		{
			name:        "Not",
			displayName: "\"NOT\"",
			pos:         position{line: 498, col: 1, offset: 13237},
			expr: &choiceExpr{
				pos: position{line: 499, col: 5, offset: 13251},
				alternatives: []interface{}{
					&seqExpr{
						pos: position{line: 499, col: 5, offset: 13251},
						exprs: []interface{}{
							&litMatcher{
								pos:        position{line: 499, col: 5, offset: 13251},
								val:        "not",
								ignoreCase: true,
								want:       "\"not\"i",
							},
							&oneOrMoreExpr{
								pos: position{line: 499, col: 12, offset: 13258},
								expr: &ruleRefExpr{
									pos:  position{line: 499, col: 12, offset: 13258},
									name: "Space",
								},
							},
						},
					},
					&seqExpr{
						pos: position{line: 500, col: 5, offset: 13269},
						exprs: []interface{}{
							&andCodeExpr{
								pos: position{line: 500, col: 5, offset: 13269},
								run: (*parser).callonNot7,
							},
							&ruleRefExpr{
								pos:  position{line: 500, col: 68, offset: 13332},
								name: "LuceneNot",
							},
						},
					},
				},
			},
		},
		{
			name:        "Literal",
			displayName: "\"literal\"",
			pos:         position{line: 502, col: 1, offset: 13343},
			expr: &choiceExpr{
				pos: position{line: 503, col: 5, offset: 13365},
				alternatives: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 503, col: 5, offset: 13365},
						name: "QuotedString",
					},
					&ruleRefExpr{
						pos:  position{line: 503, col: 20, offset: 13380},
						name: "UnquotedLiteral",
					},
				},
			},
		},
		{
			name: "QuotedString",
			pos:  position{line: 505, col: 1, offset: 13397},
			expr: &choiceExpr{
				pos: position{line: 506, col: 5, offset: 13414},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 506, col: 5, offset: 13414},
						run: (*parser).callonQuotedString2,
						expr: &seqExpr{
							pos: position{line: 506, col: 5, offset: 13414},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 506, col: 5, offset: 13414},
									val:        "\"",
									ignoreCase: false,
									want:       "\"\\\"\"",
								},
								&labeledExpr{
									pos:   position{line: 506, col: 9, offset: 13418},
									label: "prefix",
									expr: &zeroOrMoreExpr{
										pos: position{line: 506, col: 16, offset: 13425},
										expr: &ruleRefExpr{
											pos:  position{line: 506, col: 16, offset: 13425},
											name: "QuotedCharacter",
										},
									},
								},
								&labeledExpr{
									pos:   position{line: 506, col: 33, offset: 13442},
									label: "cursor",
									expr: &ruleRefExpr{
										pos:  position{line: 506, col: 40, offset: 13449},
										name: "Cursor",
									},
								},
								&labeledExpr{
									pos:   position{line: 506, col: 47, offset: 13456},
									label: "suffix",
									expr: &zeroOrMoreExpr{
										pos: position{line: 506, col: 54, offset: 13463},
										expr: &ruleRefExpr{
											pos:  position{line: 506, col: 54, offset: 13463},
											name: "QuotedCharacter",
										},
									},
								},
								&litMatcher{
									pos:        position{line: 506, col: 71, offset: 13480},
									val:        "\"",
									ignoreCase: false,
									want:       "\"\\\"\"",
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 527, col: 5, offset: 14092},
						run: (*parser).callonQuotedString14,
						expr: &seqExpr{
							pos: position{line: 527, col: 5, offset: 14092},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 527, col: 5, offset: 14092},
									val:        "\"",
									ignoreCase: false,
									want:       "\"\\\"\"",
								},
								&labeledExpr{
									pos:   position{line: 527, col: 9, offset: 14096},
									label: "chars",
									expr: &zeroOrMoreExpr{
										pos: position{line: 527, col: 15, offset: 14102},
										expr: &ruleRefExpr{
											pos:  position{line: 527, col: 15, offset: 14102},
											name: "QuotedCharacter",
										},
									},
								},
								&litMatcher{
									pos:        position{line: 527, col: 32, offset: 14119},
									val:        "\"",
									ignoreCase: false,
									want:       "\"\\\"\"",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "QuotedCharacter",
			pos:  position{line: 535, col: 1, offset: 14249},
			expr: &choiceExpr{
				pos: position{line: 536, col: 5, offset: 14269},
				alternatives: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 536, col: 5, offset: 14269},
						name: "EscapedWhitespace",
					},
					&actionExpr{
						pos: position{line: 537, col: 5, offset: 14291},
						run: (*parser).callonQuotedCharacter3,
						expr: &seqExpr{
							pos: position{line: 537, col: 5, offset: 14291},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 537, col: 5, offset: 14291},
									val:        "\\",
									ignoreCase: false,
									want:       "\"\\\\\"",
								},
								&labeledExpr{
									pos:   position{line: 537, col: 10, offset: 14296},
									label: "char",
									expr: &charClassMatcher{
										pos:        position{line: 537, col: 15, offset: 14301},
										val:        "[\\\\\"]",
										chars:      []rune{'\\', '"'},
										ignoreCase: false,
										inverted:   false,
									},
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 538, col: 5, offset: 14332},
						run: (*parser).callonQuotedCharacter8,
						expr: &seqExpr{
							pos: position{line: 538, col: 5, offset: 14332},
							exprs: []interface{}{
								&notExpr{
									pos: position{line: 538, col: 5, offset: 14332},
									expr: &ruleRefExpr{
										pos:  position{line: 538, col: 6, offset: 14333},
										name: "Cursor",
									},
								},
								&labeledExpr{
									pos:   position{line: 538, col: 13, offset: 14340},
									label: "char",
									expr: &charClassMatcher{
										pos:        position{line: 538, col: 18, offset: 14345},
										val:        "[^\"]",
										chars:      []rune{'"'},
										ignoreCase: false,
										inverted:   true,
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "UnquotedLiteral",
			pos:  position{line: 540, col: 1, offset: 14372},
			expr: &choiceExpr{
				pos: position{line: 541, col: 5, offset: 14392},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 541, col: 5, offset: 14392},
						run: (*parser).callonUnquotedLiteral2,
						expr: &seqExpr{
							pos: position{line: 541, col: 5, offset: 14392},
							exprs: []interface{}{
								&labeledExpr{
									pos:   position{line: 541, col: 5, offset: 14392},
									label: "prefix",
									expr: &zeroOrMoreExpr{
										pos: position{line: 541, col: 12, offset: 14399},
										expr: &ruleRefExpr{
											pos:  position{line: 541, col: 12, offset: 14399},
											name: "UnquotedCharacter",
										},
									},
								},
								&labeledExpr{
									pos:   position{line: 541, col: 31, offset: 14418},
									label: "cursor",
									expr: &ruleRefExpr{
										pos:  position{line: 541, col: 38, offset: 14425},
										name: "Cursor",
									},
								},
								&labeledExpr{
									pos:   position{line: 541, col: 45, offset: 14432},
									label: "suffix",
									expr: &zeroOrMoreExpr{
										pos: position{line: 541, col: 52, offset: 14439},
										expr: &ruleRefExpr{
											pos:  position{line: 541, col: 52, offset: 14439},
											name: "UnquotedCharacter",
										},
									},
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 562, col: 5, offset: 15066},
						run: (*parser).callonUnquotedLiteral12,
						expr: &labeledExpr{
							pos:   position{line: 562, col: 5, offset: 15066},
							label: "chars",
							expr: &oneOrMoreExpr{
								pos: position{line: 562, col: 11, offset: 15072},
								expr: &ruleRefExpr{
									pos:  position{line: 562, col: 11, offset: 15072},
									name: "UnquotedCharacter",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "UnquotedCharacter",
			pos:  position{line: 592, col: 1, offset: 15956},
			expr: &choiceExpr{
				pos: position{line: 593, col: 5, offset: 15978},
				alternatives: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 593, col: 5, offset: 15978},
						name: "EscapedWhitespace",
					},
					&ruleRefExpr{
						pos:  position{line: 594, col: 5, offset: 16000},
						name: "EscapedSpecialCharacter",
					},
					&ruleRefExpr{
						pos:  position{line: 595, col: 5, offset: 16028},
						name: "EscapedKeyword",
					},
					&ruleRefExpr{
						pos:  position{line: 596, col: 5, offset: 16047},
						name: "Wildcard",
					},
					&actionExpr{
						pos: position{line: 597, col: 5, offset: 16060},
						run: (*parser).callonUnquotedCharacter6,
						expr: &seqExpr{
							pos: position{line: 597, col: 5, offset: 16060},
							exprs: []interface{}{
								&notExpr{
									pos: position{line: 597, col: 5, offset: 16060},
									expr: &ruleRefExpr{
										pos:  position{line: 597, col: 6, offset: 16061},
										name: "SpecialCharacter",
									},
								},
								&notExpr{
									pos: position{line: 597, col: 23, offset: 16078},
									expr: &ruleRefExpr{
										pos:  position{line: 597, col: 24, offset: 16079},
										name: "Keyword",
									},
								},
								&notExpr{
									pos: position{line: 597, col: 32, offset: 16087},
									expr: &ruleRefExpr{
										pos:  position{line: 597, col: 33, offset: 16088},
										name: "Cursor",
									},
								},
								&labeledExpr{
									pos:   position{line: 597, col: 40, offset: 16095},
									label: "char",
									expr: &anyMatcher{
										line: 597, col: 45, offset: 16100,
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "Wildcard",
			pos:  position{line: 599, col: 1, offset: 16124},
			expr: &actionExpr{
				pos: position{line: 600, col: 5, offset: 16137},
				run: (*parser).callonWildcard1,
				expr: &litMatcher{
					pos:        position{line: 600, col: 5, offset: 16137},
					val:        "*",
					ignoreCase: false,
					want:       "\"*\"",
				},
			},
		},
		{
			name: "OptionalSpace",
			pos:  position{line: 602, col: 1, offset: 16173},
			expr: &choiceExpr{
				pos: position{line: 603, col: 5, offset: 16191},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 603, col: 5, offset: 16191},
						run: (*parser).callonOptionalSpace2,
						expr: &seqExpr{
							pos: position{line: 603, col: 5, offset: 16191},
							exprs: []interface{}{
								&labeledExpr{
									pos:   position{line: 603, col: 5, offset: 16191},
									label: "prefix",
									expr: &zeroOrMoreExpr{
										pos: position{line: 603, col: 12, offset: 16198},
										expr: &ruleRefExpr{
											pos:  position{line: 603, col: 12, offset: 16198},
											name: "Space",
										},
									},
								},
								&labeledExpr{
									pos:   position{line: 603, col: 19, offset: 16205},
									label: "cursor",
									expr: &ruleRefExpr{
										pos:  position{line: 603, col: 26, offset: 16212},
										name: "Cursor",
									},
								},
								&labeledExpr{
									pos:   position{line: 603, col: 33, offset: 16219},
									label: "suffix",
									expr: &zeroOrMoreExpr{
										pos: position{line: 603, col: 40, offset: 16226},
										expr: &ruleRefExpr{
											pos:  position{line: 603, col: 40, offset: 16226},
											name: "Space",
										},
									},
								},
							},
						},
					},
					&zeroOrMoreExpr{
						pos: position{line: 624, col: 5, offset: 16841},
						expr: &ruleRefExpr{
							pos:  position{line: 624, col: 5, offset: 16841},
							name: "Space",
						},
					},
				},
			},
		},
		{
			name: "EscapedWhitespace",
			pos:  position{line: 626, col: 1, offset: 16849},
			expr: &choiceExpr{
				pos: position{line: 627, col: 5, offset: 16871},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 627, col: 5, offset: 16871},
						run: (*parser).callonEscapedWhitespace2,
						expr: &litMatcher{
							pos:        position{line: 627, col: 5, offset: 16871},
							val:        "\\t",
							ignoreCase: false,
							want:       "\"\\\\t\"",
						},
					},
					&actionExpr{
						pos: position{line: 628, col: 5, offset: 16902},
						run: (*parser).callonEscapedWhitespace4,
						expr: &litMatcher{
							pos:        position{line: 628, col: 5, offset: 16902},
							val:        "\\r",
							ignoreCase: false,
							want:       "\"\\\\r\"",
						},
					},
					&actionExpr{
						pos: position{line: 629, col: 5, offset: 16933},
						run: (*parser).callonEscapedWhitespace6,
						expr: &litMatcher{
							pos:        position{line: 629, col: 5, offset: 16933},
							val:        "\\n",
							ignoreCase: false,
							want:       "\"\\\\n\"",
						},
					},
				},
			},
		},
		{
			name: "EscapedSpecialCharacter",
			pos:  position{line: 631, col: 1, offset: 16961},
			expr: &actionExpr{
				pos: position{line: 632, col: 5, offset: 16989},
				run: (*parser).callonEscapedSpecialCharacter1,
				expr: &seqExpr{
					pos: position{line: 632, col: 5, offset: 16989},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 632, col: 5, offset: 16989},
							val:        "\\",
							ignoreCase: false,
							want:       "\"\\\\\"",
						},
						&labeledExpr{
							pos:   position{line: 632, col: 10, offset: 16994},
							label: "char",
							expr: &ruleRefExpr{
								pos:  position{line: 632, col: 15, offset: 16999},
								name: "SpecialCharacter",
							},
						},
					},
				},
			},
		},
		{
			name: "EscapedKeyword",
			pos:  position{line: 634, col: 1, offset: 17038},
			expr: &actionExpr{
				pos: position{line: 635, col: 5, offset: 17057},
				run: (*parser).callonEscapedKeyword1,
				expr: &seqExpr{
					pos: position{line: 635, col: 5, offset: 17057},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 635, col: 5, offset: 17057},
							val:        "\\",
							ignoreCase: false,
							want:       "\"\\\\\"",
						},
						&labeledExpr{
							pos:   position{line: 635, col: 10, offset: 17062},
							label: "keyword",
							expr: &choiceExpr{
								pos: position{line: 635, col: 19, offset: 17071},
								alternatives: []interface{}{
									&litMatcher{
										pos:        position{line: 635, col: 19, offset: 17071},
										val:        "or",
										ignoreCase: true,
										want:       "\"or\"i",
									},
									&litMatcher{
										pos:        position{line: 635, col: 27, offset: 17079},
										val:        "and",
										ignoreCase: true,
										want:       "\"and\"i",
									},
									&litMatcher{
										pos:        position{line: 635, col: 36, offset: 17088},
										val:        "not",
										ignoreCase: true,
										want:       "\"not\"i",
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "Keyword",
			pos:  position{line: 637, col: 1, offset: 17121},
			expr: &choiceExpr{
				pos: position{line: 638, col: 5, offset: 17133},
				alternatives: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 638, col: 5, offset: 17133},
						name: "Or",
					},
					&ruleRefExpr{
						pos:  position{line: 638, col: 10, offset: 17138},
						name: "And",
					},
					&ruleRefExpr{
						pos:  position{line: 638, col: 16, offset: 17144},
						name: "Not",
					},
				},
			},
		},
		{
			name: "SpecialCharacter",
			pos:  position{line: 640, col: 1, offset: 17149},
			expr: &charClassMatcher{
				pos:        position{line: 641, col: 5, offset: 17170},
				val:        "[\\\\():<>\"*{}]",
				chars:      []rune{'\\', '(', ')', ':', '<', '>', '"', '*', '{', '}'},
				ignoreCase: false,
				inverted:   false,
			},
		},
		{
			name: "RangeOperator",
			pos:  position{line: 643, col: 1, offset: 17185},
			expr: &choiceExpr{
				pos: position{line: 644, col: 5, offset: 17203},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 644, col: 5, offset: 17203},
						run: (*parser).callonRangeOperator2,
						expr: &litMatcher{
							pos:        position{line: 644, col: 5, offset: 17203},
							val:        "<=",
							ignoreCase: false,
							want:       "\"<=\"",
						},
					},
					&actionExpr{
						pos: position{line: 645, col: 5, offset: 17234},
						run: (*parser).callonRangeOperator4,
						expr: &litMatcher{
							pos:        position{line: 645, col: 5, offset: 17234},
							val:        ">=",
							ignoreCase: false,
							want:       "\">=\"",
						},
					},
					&actionExpr{
						pos: position{line: 646, col: 5, offset: 17265},
						run: (*parser).callonRangeOperator6,
						expr: &litMatcher{
							pos:        position{line: 646, col: 5, offset: 17265},
							val:        "<",
							ignoreCase: false,
							want:       "\"<\"",
						},
					},
					&actionExpr{
						pos: position{line: 647, col: 5, offset: 17294},
						run: (*parser).callonRangeOperator8,
						expr: &litMatcher{
							pos:        position{line: 647, col: 5, offset: 17294},
							val:        ">",
							ignoreCase: false,
							want:       "\">\"",
						},
					},
				},
			},
		},
		{
			name: "Space",
			pos:  position{line: 650, col: 1, offset: 17321},
			expr: &charClassMatcher{
				pos:        position{line: 651, col: 5, offset: 17331},
				val:        "[ \\t\\r\\n]",
				chars:      []rune{' ', '\t', '\r', '\n'},
				ignoreCase: false,
				inverted:   false,
			},
		},
		{
			name: "whitespace",
			pos:  position{line: 653, col: 1, offset: 17342},
			expr: &charClassMatcher{
				pos:        position{line: 654, col: 5, offset: 17357},
				val:        "[ \\t\\r\\n]",
				chars:      []rune{' ', '\t', '\r', '\n'},
				ignoreCase: false,
				inverted:   false,
			},
		},
		{
			name: "Cursor",
			pos:  position{line: 656, col: 1, offset: 17368},
			expr: &actionExpr{
				pos: position{line: 657, col: 5, offset: 17379},
				run: (*parser).callonCursor1,
				expr: &seqExpr{
					pos: position{line: 657, col: 5, offset: 17379},
					exprs: []interface{}{
						&andCodeExpr{
							pos: position{line: 657, col: 5, offset: 17379},
							run: (*parser).callonCursor3,
						},
						&litMatcher{
							pos:        position{line: 663, col: 5, offset: 17518},
							val:        "@kuery-cursor@",
							ignoreCase: false,
							want:       "\"@kuery-cursor@\"",
						},
					},
				},
			},
		},
		{
			name: "LuceneOr",
			pos:  position{line: 674, col: 1, offset: 17800},
			expr: &actionExpr{
				pos: position{line: 675, col: 6, offset: 17814},
				run: (*parser).callonLuceneOr1,
				expr: &seqExpr{
					pos: position{line: 675, col: 6, offset: 17814},
					exprs: []interface{}{
						&zeroOrMoreExpr{
							pos: position{line: 675, col: 6, offset: 17814},
							expr: &ruleRefExpr{
								pos:  position{line: 675, col: 6, offset: 17814},
								name: "Space",
							},
						},
						&litMatcher{
							pos:        position{line: 675, col: 13, offset: 17821},
							val:        "||",
							ignoreCase: false,
							want:       "\"||\"",
						},
						&zeroOrMoreExpr{
							pos: position{line: 675, col: 18, offset: 17826},
							expr: &ruleRefExpr{
								pos:  position{line: 675, col: 18, offset: 17826},
								name: "Space",
							},
						},
					},
				},
			},
		},
		{
			name: "LuceneAnd",
			pos:  position{line: 680, col: 1, offset: 17903},
			expr: &choiceExpr{
				pos: position{line: 681, col: 5, offset: 17917},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 681, col: 5, offset: 17917},
						run: (*parser).callonLuceneAnd2,
						expr: &seqExpr{
							pos: position{line: 681, col: 5, offset: 17917},
							exprs: []interface{}{
								&zeroOrMoreExpr{
									pos: position{line: 681, col: 5, offset: 17917},
									expr: &ruleRefExpr{
										pos:  position{line: 681, col: 5, offset: 17917},
										name: "Space",
									},
								},
								&litMatcher{
									pos:        position{line: 681, col: 12, offset: 17924},
									val:        "&&",
									ignoreCase: false,
									want:       "\"&&\"",
								},
								&zeroOrMoreExpr{
									pos: position{line: 681, col: 17, offset: 17929},
									expr: &ruleRefExpr{
										pos:  position{line: 681, col: 17, offset: 17929},
										name: "Space",
									},
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 685, col: 5, offset: 18011},
						run: (*parser).callonLuceneAnd9,
						expr: &litMatcher{
							pos:        position{line: 685, col: 5, offset: 18011},
							val:        "+",
							ignoreCase: false,
							want:       "\"+\"",
						},
					},
				},
			},
		},
		{
			name: "LuceneNot",
			pos:  position{line: 690, col: 1, offset: 18087},
			expr: &choiceExpr{
				pos: position{line: 691, col: 5, offset: 18101},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 691, col: 5, offset: 18101},
						run: (*parser).callonLuceneNot2,
						expr: &litMatcher{
							pos:        position{line: 691, col: 5, offset: 18101},
							val:        "-",
							ignoreCase: false,
							want:       "\"-\"",
						},
					},
					&actionExpr{
						pos: position{line: 695, col: 5, offset: 18180},
						run: (*parser).callonLuceneNot4,
						expr: &litMatcher{
							pos:        position{line: 695, col: 5, offset: 18180},
							val:        "!",
							ignoreCase: false,
							want:       "\"!\"",
						},
					},
				},
			},
		},
		{
			name: "LuceneQuery",
			pos:  position{line: 700, col: 1, offset: 18256},
			expr: &choiceExpr{
				pos: position{line: 701, col: 5, offset: 18272},
				alternatives: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 701, col: 5, offset: 18272},
						name: "LuceneFieldQuery",
					},
					&ruleRefExpr{
						pos:  position{line: 702, col: 5, offset: 18293},
						name: "LuceneValue",
					},
					&ruleRefExpr{
						pos:  position{line: 703, col: 5, offset: 18309},
						name: "LuceneExists",
					},
				},
			},
		},
		{
			name: "LuceneFieldQuery",
			pos:  position{line: 705, col: 1, offset: 18323},
			expr: &seqExpr{
				pos: position{line: 706, col: 5, offset: 18344},
				exprs: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 706, col: 5, offset: 18344},
						name: "LuceneLiteral",
					},
					&zeroOrMoreExpr{
						pos: position{line: 706, col: 19, offset: 18358},
						expr: &ruleRefExpr{
							pos:  position{line: 706, col: 19, offset: 18358},
							name: "Space",
						},
					},
					&litMatcher{
						pos:        position{line: 706, col: 26, offset: 18365},
						val:        ":",
						ignoreCase: false,
						want:       "\":\"",
					},
					&zeroOrMoreExpr{
						pos: position{line: 706, col: 30, offset: 18369},
						expr: &ruleRefExpr{
							pos:  position{line: 706, col: 30, offset: 18369},
							name: "Space",
						},
					},
					&ruleRefExpr{
						pos:  position{line: 706, col: 37, offset: 18376},
						name: "LuceneValue",
					},
				},
			},
		},
		{
			name: "LuceneValue",
			pos:  position{line: 708, col: 1, offset: 18389},
			expr: &choiceExpr{
				pos: position{line: 709, col: 5, offset: 18405},
				alternatives: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 709, col: 5, offset: 18405},
						name: "LuceneRange",
					},
					&ruleRefExpr{
						pos:  position{line: 710, col: 5, offset: 18421},
						name: "LuceneWildcard",
					},
					&ruleRefExpr{
						pos:  position{line: 711, col: 5, offset: 18440},
						name: "LuceneRegex",
					},
					&ruleRefExpr{
						pos:  position{line: 712, col: 5, offset: 18456},
						name: "LuceneFuzzy",
					},
					&ruleRefExpr{
						pos:  position{line: 713, col: 5, offset: 18472},
						name: "LuceneProximity",
					},
					&ruleRefExpr{
						pos:  position{line: 714, col: 5, offset: 18492},
						name: "LuceneBoost",
					},
				},
			},
		},
		{
			name: "LuceneExists",
			pos:  position{line: 716, col: 1, offset: 18505},
			expr: &actionExpr{
				pos: position{line: 717, col: 5, offset: 18522},
				run: (*parser).callonLuceneExists1,
				expr: &seqExpr{
					pos: position{line: 717, col: 5, offset: 18522},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 717, col: 5, offset: 18522},
							val:        "_exists_",
							ignoreCase: false,
							want:       "\"_exists_\"",
						},
						&zeroOrMoreExpr{
							pos: position{line: 717, col: 16, offset: 18533},
							expr: &ruleRefExpr{
								pos:  position{line: 717, col: 16, offset: 18533},
								name: "Space",
							},
						},
						&litMatcher{
							pos:        position{line: 717, col: 23, offset: 18540},
							val:        ":",
							ignoreCase: false,
							want:       "\":\"",
						},
						&zeroOrMoreExpr{
							pos: position{line: 717, col: 27, offset: 18544},
							expr: &ruleRefExpr{
								pos:  position{line: 717, col: 27, offset: 18544},
								name: "Space",
							},
						},
						&ruleRefExpr{
							pos:  position{line: 717, col: 34, offset: 18551},
							name: "LuceneLiteral",
						},
					},
				},
			},
		},
		{
			name: "LuceneRange",
			pos:  position{line: 722, col: 1, offset: 18643},
			expr: &choiceExpr{
				pos: position{line: 723, col: 5, offset: 18659},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 723, col: 5, offset: 18659},
						run: (*parser).callonLuceneRange2,
						expr: &seqExpr{
							pos: position{line: 723, col: 5, offset: 18659},
							exprs: []interface{}{
								&ruleRefExpr{
									pos:  position{line: 723, col: 5, offset: 18659},
									name: "RangeOperator",
								},
								&zeroOrMoreExpr{
									pos: position{line: 723, col: 19, offset: 18673},
									expr: &ruleRefExpr{
										pos:  position{line: 723, col: 19, offset: 18673},
										name: "Space",
									},
								},
								&ruleRefExpr{
									pos:  position{line: 723, col: 26, offset: 18680},
									name: "LuceneLiteral",
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 727, col: 5, offset: 18773},
						run: (*parser).callonLuceneRange8,
						expr: &seqExpr{
							pos: position{line: 727, col: 5, offset: 18773},
							exprs: []interface{}{
								&ruleRefExpr{
									pos:  position{line: 727, col: 5, offset: 18773},
									name: "LuceneRangeStart",
								},
								&zeroOrMoreExpr{
									pos: position{line: 727, col: 22, offset: 18790},
									expr: &ruleRefExpr{
										pos:  position{line: 727, col: 22, offset: 18790},
										name: "Space",
									},
								},
								&ruleRefExpr{
									pos:  position{line: 727, col: 29, offset: 18797},
									name: "LuceneLiteral",
								},
								&ruleRefExpr{
									pos:  position{line: 727, col: 43, offset: 18811},
									name: "LuceneTo",
								},
								&ruleRefExpr{
									pos:  position{line: 727, col: 52, offset: 18820},
									name: "LuceneLiteral",
								},
								&ruleRefExpr{
									pos:  position{line: 727, col: 66, offset: 18834},
									name: "LuceneRangeEnd",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "LuceneWildcard",
			pos:  position{line: 732, col: 1, offset: 18925},
			expr: &actionExpr{
				pos: position{line: 733, col: 5, offset: 18944},
				run: (*parser).callonLuceneWildcard1,
				expr: &seqExpr{
					pos: position{line: 733, col: 5, offset: 18944},
					exprs: []interface{}{
						&zeroOrMoreExpr{
							pos: position{line: 733, col: 5, offset: 18944},
							expr: &choiceExpr{
								pos: position{line: 733, col: 6, offset: 18945},
								alternatives: []interface{}{
									&ruleRefExpr{
										pos:  position{line: 733, col: 6, offset: 18945},
										name: "LuceneUnquotedCharacter",
									},
									&litMatcher{
										pos:        position{line: 733, col: 32, offset: 18971},
										val:        "*",
										ignoreCase: false,
										want:       "\"*\"",
									},
								},
							},
						},
						&litMatcher{
							pos:        position{line: 733, col: 38, offset: 18977},
							val:        "?",
							ignoreCase: false,
							want:       "\"?\"",
						},
						&zeroOrMoreExpr{
							pos: position{line: 733, col: 42, offset: 18981},
							expr: &ruleRefExpr{
								pos:  position{line: 733, col: 42, offset: 18981},
								name: "LuceneWildcard",
							},
						},
					},
				},
			},
		},
		{
			name: "LuceneRegex",
			pos:  position{line: 738, col: 1, offset: 19079},
			expr: &actionExpr{
				pos: position{line: 739, col: 5, offset: 19095},
				run: (*parser).callonLuceneRegex1,
				expr: &seqExpr{
					pos: position{line: 739, col: 5, offset: 19095},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 739, col: 5, offset: 19095},
							val:        "/",
							ignoreCase: false,
							want:       "\"/\"",
						},
						&zeroOrMoreExpr{
							pos: position{line: 739, col: 9, offset: 19099},
							expr: &charClassMatcher{
								pos:        position{line: 739, col: 9, offset: 19099},
								val:        "[^/]",
								chars:      []rune{'/'},
								ignoreCase: false,
								inverted:   true,
							},
						},
						&litMatcher{
							pos:        position{line: 739, col: 15, offset: 19105},
							val:        "/",
							ignoreCase: false,
							want:       "\"/\"",
						},
					},
				},
			},
		},
		{
			name: "LuceneFuzzy",
			pos:  position{line: 744, col: 1, offset: 19185},
			expr: &actionExpr{
				pos: position{line: 745, col: 5, offset: 19201},
				run: (*parser).callonLuceneFuzzy1,
				expr: &seqExpr{
					pos: position{line: 745, col: 5, offset: 19201},
					exprs: []interface{}{
						&ruleRefExpr{
							pos:  position{line: 745, col: 5, offset: 19201},
							name: "LuceneUnquotedLiteral",
						},
						&litMatcher{
							pos:        position{line: 745, col: 27, offset: 19223},
							val:        "~",
							ignoreCase: false,
							want:       "\"~\"",
						},
						&zeroOrMoreExpr{
							pos: position{line: 745, col: 31, offset: 19227},
							expr: &charClassMatcher{
								pos:        position{line: 745, col: 31, offset: 19227},
								val:        "[0-9]",
								ranges:     []rune{'0', '9'},
								ignoreCase: false,
								inverted:   false,
							},
						},
					},
				},
			},
		},
		{
			name: "LuceneProximity",
			pos:  position{line: 750, col: 1, offset: 19310},
			expr: &actionExpr{
				pos: position{line: 751, col: 5, offset: 19330},
				run: (*parser).callonLuceneProximity1,
				expr: &seqExpr{
					pos: position{line: 751, col: 5, offset: 19330},
					exprs: []interface{}{
						&ruleRefExpr{
							pos:  position{line: 751, col: 5, offset: 19330},
							name: "QuotedString",
						},
						&litMatcher{
							pos:        position{line: 751, col: 18, offset: 19343},
							val:        "~",
							ignoreCase: false,
							want:       "\"~\"",
						},
						&zeroOrMoreExpr{
							pos: position{line: 751, col: 22, offset: 19347},
							expr: &charClassMatcher{
								pos:        position{line: 751, col: 22, offset: 19347},
								val:        "[0-9]",
								ranges:     []rune{'0', '9'},
								ignoreCase: false,
								inverted:   false,
							},
						},
					},
				},
			},
		},
		{
			name: "LuceneBoost",
			pos:  position{line: 756, col: 1, offset: 19438},
			expr: &actionExpr{
				pos: position{line: 757, col: 5, offset: 19454},
				run: (*parser).callonLuceneBoost1,
				expr: &seqExpr{
					pos: position{line: 757, col: 5, offset: 19454},
					exprs: []interface{}{
						&ruleRefExpr{
							pos:  position{line: 757, col: 5, offset: 19454},
							name: "LuceneLiteral",
						},
						&litMatcher{
							pos:        position{line: 757, col: 19, offset: 19468},
							val:        "^",
							ignoreCase: false,
							want:       "\"^\"",
						},
						&zeroOrMoreExpr{
							pos: position{line: 757, col: 23, offset: 19472},
							expr: &charClassMatcher{
								pos:        position{line: 757, col: 23, offset: 19472},
								val:        "[0-9]",
								ranges:     []rune{'0', '9'},
								ignoreCase: false,
								inverted:   false,
							},
						},
					},
				},
			},
		},
		{
			name: "LuceneLiteral",
			pos:  position{line: 762, col: 1, offset: 19555},
			expr: &choiceExpr{
				pos: position{line: 763, col: 5, offset: 19573},
				alternatives: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 763, col: 5, offset: 19573},
						name: "QuotedString",
					},
					&ruleRefExpr{
						pos:  position{line: 763, col: 20, offset: 19588},
						name: "LuceneUnquotedLiteral",
					},
				},
			},
		},
		{
			name: "LuceneUnquotedLiteral",
			pos:  position{line: 765, col: 1, offset: 19611},
			expr: &oneOrMoreExpr{
				pos: position{line: 766, col: 5, offset: 19637},
				expr: &ruleRefExpr{
					pos:  position{line: 766, col: 5, offset: 19637},
					name: "LuceneUnquotedCharacter",
				},
			},
		},
		{
			name: "LuceneUnquotedCharacter",
			pos:  position{line: 768, col: 1, offset: 19663},
			expr: &choiceExpr{
				pos: position{line: 769, col: 5, offset: 19691},
				alternatives: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 769, col: 5, offset: 19691},
						name: "EscapedWhitespace",
					},
					&ruleRefExpr{
						pos:  position{line: 770, col: 5, offset: 19713},
						name: "EscapedLuceneSpecialCharacter",
					},
					&seqExpr{
						pos: position{line: 771, col: 5, offset: 19747},
						exprs: []interface{}{
							&notExpr{
								pos: position{line: 771, col: 5, offset: 19747},
								expr: &ruleRefExpr{
									pos:  position{line: 771, col: 6, offset: 19748},
									name: "LuceneSpecialCharacter",
								},
							},
							&notExpr{
								pos: position{line: 771, col: 29, offset: 19771},
								expr: &ruleRefExpr{
									pos:  position{line: 771, col: 30, offset: 19772},
									name: "LuceneKeyword",
								},
							},
							&anyMatcher{
								line: 771, col: 44, offset: 19786,
							},
						},
					},
				},
			},
		},
		{
			name: "LuceneKeyword",
			pos:  position{line: 773, col: 1, offset: 19789},
			expr: &choiceExpr{
				pos: position{line: 774, col: 5, offset: 19807},
				alternatives: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 774, col: 5, offset: 19807},
						name: "Or",
					},
					&ruleRefExpr{
						pos:  position{line: 774, col: 10, offset: 19812},
						name: "And",
					},
					&ruleRefExpr{
						pos:  position{line: 774, col: 16, offset: 19818},
						name: "LuceneOr",
					},
					&ruleRefExpr{
						pos:  position{line: 774, col: 27, offset: 19829},
						name: "LuceneAnd",
					},
					&ruleRefExpr{
						pos:  position{line: 774, col: 39, offset: 19841},
						name: "LuceneNot",
					},
					&ruleRefExpr{
						pos:  position{line: 774, col: 51, offset: 19853},
						name: "LuceneTo",
					},
				},
			},
		},
		{
			name: "EscapedLuceneSpecialCharacter",
			pos:  position{line: 776, col: 1, offset: 19863},
			expr: &actionExpr{
				pos: position{line: 777, col: 5, offset: 19897},
				run: (*parser).callonEscapedLuceneSpecialCharacter1,
				expr: &seqExpr{
					pos: position{line: 777, col: 5, offset: 19897},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 777, col: 5, offset: 19897},
							val:        "\\",
							ignoreCase: false,
							want:       "\"\\\\\"",
						},
						&ruleRefExpr{
							pos:  position{line: 777, col: 10, offset: 19902},
							name: "LuceneSpecialCharacter",
						},
					},
				},
			},
		},
		{
			name: "LuceneSpecialCharacter",
			pos:  position{line: 785, col: 1, offset: 19984},
			expr: &choiceExpr{
				pos: position{line: 786, col: 5, offset: 20011},
				alternatives: []interface{}{
					&litMatcher{
						pos:        position{line: 786, col: 5, offset: 20011},
						val:        "+",
						ignoreCase: false,
						want:       "\"+\"",
					},
					&litMatcher{
						pos:        position{line: 786, col: 11, offset: 20017},
						val:        "-",
						ignoreCase: false,
						want:       "\"-\"",
					},
					&litMatcher{
						pos:        position{line: 786, col: 17, offset: 20023},
						val:        "=",
						ignoreCase: false,
						want:       "\"=\"",
					},
					&litMatcher{
						pos:        position{line: 786, col: 23, offset: 20029},
						val:        ">",
						ignoreCase: false,
						want:       "\">\"",
					},
					&litMatcher{
						pos:        position{line: 786, col: 29, offset: 20035},
						val:        "<",
						ignoreCase: false,
						want:       "\"<\"",
					},
					&litMatcher{
						pos:        position{line: 786, col: 35, offset: 20041},
						val:        "!",
						ignoreCase: false,
						want:       "\"!\"",
					},
					&litMatcher{
						pos:        position{line: 786, col: 41, offset: 20047},
						val:        "(",
						ignoreCase: false,
						want:       "\"(\"",
					},
					&litMatcher{
						pos:        position{line: 786, col: 47, offset: 20053},
						val:        ")",
						ignoreCase: false,
						want:       "\")\"",
					},
					&litMatcher{
						pos:        position{line: 786, col: 53, offset: 20059},
						val:        "{",
						ignoreCase: false,
						want:       "\"{\"",
					},
					&litMatcher{
						pos:        position{line: 786, col: 59, offset: 20065},
						val:        "}",
						ignoreCase: false,
						want:       "\"}\"",
					},
					&litMatcher{
						pos:        position{line: 786, col: 65, offset: 20071},
						val:        "[",
						ignoreCase: false,
						want:       "\"[\"",
					},
					&litMatcher{
						pos:        position{line: 786, col: 71, offset: 20077},
						val:        "]",
						ignoreCase: false,
						want:       "\"]\"",
					},
					&litMatcher{
						pos:        position{line: 786, col: 77, offset: 20083},
						val:        "^",
						ignoreCase: false,
						want:       "\"^\"",
					},
					&litMatcher{
						pos:        position{line: 786, col: 83, offset: 20089},
						val:        "\"",
						ignoreCase: false,
						want:       "\"\\\"\"",
					},
					&litMatcher{
						pos:        position{line: 786, col: 89, offset: 20095},
						val:        "~",
						ignoreCase: false,
						want:       "\"~\"",
					},
					&litMatcher{
						pos:        position{line: 786, col: 95, offset: 20101},
						val:        "*",
						ignoreCase: false,
						want:       "\"*\"",
					},
					&litMatcher{
						pos:        position{line: 786, col: 101, offset: 20107},
						val:        "?",
						ignoreCase: false,
						want:       "\"?\"",
					},
					&litMatcher{
						pos:        position{line: 786, col: 107, offset: 20113},
						val:        ":",
						ignoreCase: false,
						want:       "\":\"",
					},
					&litMatcher{
						pos:        position{line: 786, col: 113, offset: 20119},
						val:        "\\",
						ignoreCase: false,
						want:       "\"\\\\\"",
					},
					&litMatcher{
						pos:        position{line: 786, col: 120, offset: 20126},
						val:        "/",
						ignoreCase: false,
						want:       "\"/\"",
					},
				},
			},
		},
		{
			name: "LuceneTo",
			pos:  position{line: 788, col: 1, offset: 20131},
			expr: &seqExpr{
				pos: position{line: 789, col: 5, offset: 20144},
				exprs: []interface{}{
					&oneOrMoreExpr{
						pos: position{line: 789, col: 5, offset: 20144},
						expr: &ruleRefExpr{
							pos:  position{line: 789, col: 5, offset: 20144},
							name: "Space",
						},
					},
					&litMatcher{
						pos:        position{line: 789, col: 12, offset: 20151},
						val:        "TO",
						ignoreCase: false,
						want:       "\"TO\"",
					},
					&oneOrMoreExpr{
						pos: position{line: 789, col: 17, offset: 20156},
						expr: &ruleRefExpr{
							pos:  position{line: 789, col: 17, offset: 20156},
							name: "Space",
						},
					},
				},
			},
		},
		{
			name: "LuceneRangeStart",
			pos:  position{line: 791, col: 1, offset: 20164},
			expr: &choiceExpr{
				pos: position{line: 792, col: 5, offset: 20185},
				alternatives: []interface{}{
					&litMatcher{
						pos:        position{line: 792, col: 5, offset: 20185},
						val:        "[",
						ignoreCase: false,
						want:       "\"[\"",
					},
					&litMatcher{
						pos:        position{line: 792, col: 11, offset: 20191},
						val:        "{",
						ignoreCase: false,
						want:       "\"{\"",
					},
				},
			},
		},
		{
			name: "LuceneRangeEnd",
			pos:  position{line: 794, col: 1, offset: 20196},
			expr: &choiceExpr{
				pos: position{line: 795, col: 5, offset: 20215},
				alternatives: []interface{}{
					&litMatcher{
						pos:        position{line: 795, col: 5, offset: 20215},
						val:        "]",
						ignoreCase: false,
						want:       "\"]\"",
					},
					&litMatcher{
						pos:        position{line: 795, col: 11, offset: 20221},
						val:        "}",
						ignoreCase: false,
						want:       "\"}\"",
					},
				},
			},
		},
	},
}

func (c *current) onstart1(query, trailing interface{}) (interface{}, error) {
	trailingNode, _ := trailing.(INode)
	if trailingNode != nil && trailingNode.GetType() == TypeCursor {
		cursorNode := trailingNode.(*CursorNode)
		out := cursorNode.Copy()
		out.SetSuggestionTypes([]string{"conjunction"})
		return out, nil
	}
	if query != nil {
		return query, nil
	}
	//fieldArg := NewWildcardNode("*")
	//valueArg := NewWildcardNode("*")
	fieldArg := NewWildcardNode(WildcardSymbol)
	valueArg := NewWildcardNode(WildcardSymbol)
	isPhraseArg := NewLiteralNode(nil)
	return NewFunctionIs(fieldArg, valueArg, isPhraseArg), nil
	/*
	   if trailing.kind == "cursor" {
	     return {
	       ...trailing,
	       suggestionTypes: ['conjunction']
	     }
	   }
	   if query != nil {
	     return query
	   }
	   return nodeTypes.function.buildNode("is", "*", "*")
	*/

}

func (p *parser) callonstart1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onstart1(stack["query"], stack["trailing"])
}

func (c *current) onOrQuery3() (bool, error) {
	return true, nil /* errors.New("errorOnLuceneSyntax") */
}

func (p *parser) callonOrQuery3() (bool, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onOrQuery3()
}

func (c *current) onOrQuery5(left, right interface{}) (interface{}, error) {
	leftNode, _ := left.(INode)
	rightNode, _ := right.(INode)
	if leftNode != nil && leftNode.GetType() == TypeCursor {
		return leftNode, nil
	}
	if rightNode != nil && rightNode.GetType() == TypeCursor {
		return rightNode, nil
	}
	return NewFunctionOr(leftNode, rightNode), nil

	//const cursor = [left, right].find(node => node.kind == "cursor")
	//if cursor != nil {
	//  return cursor
	//}
	//return NewFunctionNode('or', [left, right])

}

func (p *parser) callonOrQuery5() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onOrQuery5(stack["left"], stack["right"])
}

func (c *current) onAndQuery2(left, right interface{}) (interface{}, error) {
	leftNode, _ := left.(INode)
	rightNode, _ := right.(INode)

	if leftNode != nil && leftNode.GetType() == TypeCursor {
		return leftNode, nil
	}
	if rightNode != nil && rightNode.GetType() == TypeCursor {
		return rightNode, nil
	}
	return NewFunctionAnd(leftNode, rightNode), nil
	//return NewFunctionNode("and", []interface{}{leftNode, rightNode}), nil
	//const cursor = [left, right].find(node => node.kind == "cursor")
	//if cursor != nil {
	//  return cursor
	//}
	//return NewFunctionNode("and", [left, right])

}

func (p *parser) callonAndQuery2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAndQuery2(stack["left"], stack["right"])
}

func (c *current) onNotQuery2(query interface{}) (interface{}, error) {
	queryNode, _ := query.(INode)
	if queryNode != nil && queryNode.GetType() == TypeCursor {
		return queryNode, nil
	}
	return NewFunctionNot(queryNode), nil
	//return NewFunctionNode("not", []interface{}{query}), nil
	//if query.kind == "cursor" {
	//  return query
	//}
	//return buildFunctionNode("not", [query])

}

func (p *parser) callonNotQuery2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onNotQuery2(stack["query"])
}

func (c *current) onSubQuery2(query, trailing interface{}) (interface{}, error) {
	trailingNode, _ := trailing.(INode)
	if trailingNode != nil && trailingNode.GetType() == TypeCursor {
		cursorNode := trailingNode.(*CursorNode)
		out := cursorNode.Copy()
		out.SetSuggestionTypes([]string{"conjunction"})
		return out, nil
	}
	return query, nil
	//if trailing.kind == "cursor" {
	//  return {
	//    ...trailing,
	//    suggestionTypes: ["conjunction"]
	//  }
	//}
	//return query

}

func (p *parser) callonSubQuery2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSubQuery2(stack["query"], stack["trailing"])
}

func (c *current) onNestedQuery2(field, query, trailing interface{}) (interface{}, error) {
	fieldNode, _ := field.(INode)
	queryNode, _ := query.(INode)
	if queryNode != nil && queryNode.GetType() == TypeCursor {
		var v string
		if fieldNode != nil {
			v = fmt.Sprintf("%v", fieldNode.GetValue())
		}
		clonedNode := queryNode.(*CursorNode).Copy()
		if len(clonedNode.GetNestedPath()) > 0 {
			clonedNode.SetNestedPath(v + "." + clonedNode.GetNestedPath())
		} else {
			clonedNode.SetNestedPath(v)
		}
		return clonedNode, nil
	}

	trailingNode, _ := trailing.(INode)
	if trailingNode != nil && trailingNode.GetType() == TypeCursor {
		clonedNode := trailingNode.(*CursorNode).Copy()
		clonedNode.SetSuggestionTypes([]string{"conjunction"})
		return clonedNode, nil
	}

	return NewFunctionNested(fieldNode, queryNode), nil
	/*
	    if query.kind == "cursor" {
	     return {
	       ...query,
	       nestedPath: query.nestedPath ? `${field.value}.${query.nestedPath}` : field.value,
	     }
	   }

	   if trailing.kind == "cursor" {
	     return {
	       ...trailing,
	       suggestionTypes: ["conjunction"]
	     }
	   }
	   return buildFunctionNode("nested", [field, query])
	*/

}

func (p *parser) callonNestedQuery2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onNestedQuery2(stack["field"], stack["query"], stack["trailing"])
}

func (c *current) onFieldRangeExpression1(field, operator, value interface{}) (interface{}, error) {
	valueNode, _ := value.(INode)
	if valueNode != nil && valueNode.GetType() == TypeCursor {
		cursorNode := valueNode.(*CursorNode)
		out := cursorNode.Copy()
		out.SetSuggestionTypes([]string{"conjunction"})
		return out, nil
	}

	var fieldNode INode
	switch f := field.(type) {
	case INode:
		fieldNode = f
	//case string: fieldNode, _ = FromLiteralExpression(f, nil)
	default:
		fieldNode = NewLiteralNode(f)
	}

	opNode := NewLiteralNode(operator)
	return NewFunctionRange(fieldNode, opNode, valueNode), nil

	//if value.kind == "cursor" {
	//  return {
	//    ...value,
	//    suggestionTypes: ["conjunction"]
	//  }
	//}
	//const range = buildNamedArgNode(operator, value)
	//return buildFunctionNode("range", [field, range])

}

func (p *parser) callonFieldRangeExpression1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onFieldRangeExpression1(stack["field"], stack["operator"], stack["value"])
}

func (c *current) onFieldValueExpression1(field, partial interface{}) (interface{}, error) {
	fieldNode, _ := field.(INode)
	partialNode, _ := partial.(INode)
	if partialNode != nil && partialNode.GetType() == TypeCursor {
		cursorNode := partialNode.(*CursorNode)
		out := cursorNode.Copy()
		fieldNode, _ := field.(INode)
		if fieldNode != nil {
			out.SetFieldName(fmt.Sprintf("%v", fieldNode.GetValue()))
		}
		out.SetSuggestionTypes([]string{"value", "conjunction"})
		return out, nil
	}

	fn, _ := partial.(func(field INode) INode)
	if fn == nil {
		return nil, errors.New("invalid fn")
	}

	return fn(fieldNode), nil
	/*
	   if partial.kind == "cursor" {
	     return {
	       ...partial,
	       fieldName: field.value,
	       suggestionTypes: ["value", "conjunction"]
	     }
	   }
	   return partial(field)
	*/

}

func (p *parser) callonFieldValueExpression1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onFieldValueExpression1(stack["field"], stack["partial"])
}

func (c *current) onValueExpression1(partial interface{}) (interface{}, error) {
	partialNode, _ := partial.(INode)
	if partialNode != nil && partialNode.GetType() == TypeCursor {
		cursorNode := partialNode.(*CursorNode)
		fieldName := Trim(cursorNode.GetPrefix() + cursorNode.GetSuffix())
		out := cursorNode.Copy()
		out.SetFieldName(fieldName)
		out.SetSuggestionTypes([]string{"field", "operator", "conjunction"})
		return out, nil
	}

	fn, _ := partial.(func(field INode) INode)
	if fn == nil {
		return nil, errors.New("invalid fn")
	}
	field := NewLiteralNode(nil)
	return fn(field), nil

	/*
	   if partial.kind == "cursor" {
	     const fieldName = `${partial.prefix}${partial.suffix}`.trim()
	     return {
	       ...partial,
	       fieldName,
	       suggestionTypes: ["field", "operator", "conjunction"]
	     }
	   }
	   const field = buildLiteralNode(nil)
	   return partial(field)
	*/

}

func (p *parser) callonValueExpression1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onValueExpression1(stack["partial"])
}

func (c *current) onListOfValues2(partial, trailing interface{}) (interface{}, error) {
	trailingNode, _ := trailing.(INode)
	if trailingNode != nil && trailingNode.GetType() == TypeCursor {
		cursorNode := trailingNode.(*CursorNode)
		out := cursorNode.Copy()
		out.SetSuggestionTypes([]string{"conjunction"})
		return out, nil
	}
	return partial, nil
	/*
	   if trailing.kind == "cursor" {
	     return {
	       ...trailing,
	       suggestionTypes: ["conjunction"]
	     }
	   }
	   return partial
	*/

}

func (p *parser) callonListOfValues2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onListOfValues2(stack["partial"], stack["trailing"])
}

func (c *current) onOrListOfValues2(partialLeft, partialRight interface{}) (interface{}, error) {
	var cursor *CursorNode

	if leftNode, _ := partialLeft.(INode); leftNode != nil && leftNode.GetType() == TypeCursor {
		cursor, _ = leftNode.(*CursorNode)
	}
	if cursor == nil {
		if rightNode, _ := partialRight.(INode); rightNode != nil && rightNode.GetType() == TypeCursor {
			cursor, _ = rightNode.(*CursorNode)
		}
	}
	if cursor != nil {
		out := cursor.Copy()
		out.SetSuggestionTypes([]string{"value"})
		return out, nil
	}

	fn := func(field INode) INode {
		var lValue INode
		var rValue INode
		if fnLeft, _ := partialLeft.(func(INode) INode); fnLeft != nil {
			lValue = fnLeft(field)
		}
		if fnRight, _ := partialRight.(func(INode) INode); fnRight != nil {
			lValue = fnRight(field)
		}
		return NewFunctionOr(lValue, rValue)
	}
	return fn, nil
	/*
	   const cursor = [partialLeft, partialRight].find(node => node.kind == "cursor")
	   if (cursor) {
	     return {
	       ...cursor,
	       suggestionTypes: ["value"]
	     }
	   }
	   return (field) => buildFunctionNode("or", [partialLeft(field), partialRight(field)])
	*/

}

func (p *parser) callonOrListOfValues2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onOrListOfValues2(stack["partialLeft"], stack["partialRight"])
}

func (c *current) onAndListOfValues2(partialLeft, partialRight interface{}) (interface{}, error) {
	var cursor *CursorNode

	if leftNode, _ := partialLeft.(INode); leftNode != nil && leftNode.GetType() == TypeCursor {
		cursor, _ = leftNode.(*CursorNode)
	}
	if cursor == nil {
		if rightNode, _ := partialRight.(INode); rightNode != nil && rightNode.GetType() == TypeCursor {
			cursor, _ = rightNode.(*CursorNode)
		}
	}
	if cursor != nil {
		cloned := cursor.Copy()
		cloned.SetSuggestionTypes([]string{"value"})
		return cloned, nil
	}
	fnLeft, _ := partialLeft.(func(INode) INode)
	if fnLeft == nil {
		return nil, errors.New("andListOfValues: nil left")
	}
	fnRight, _ := partialRight.(func(INode) INode)
	if fnRight == nil {
		return nil, errors.New("andListOfValues: nil right")
	}

	fn := func(field INode) INode {
		return NewFunctionAnd(fnLeft(field), fnRight(field))
	}
	return fn, nil
	/*
	   const cursor = [partialLeft, partialRight].find(node => node.kind == "cursor")
	   if cursor != nil {
	     return {
	       ...cursor,
	       suggestionTypes: ["value"]
	     }
	   }
	   return (field) => buildFunctionNode("and", [partialLeft(field), partialRight(field)])
	*/

}

func (p *parser) callonAndListOfValues2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAndListOfValues2(stack["partialLeft"], stack["partialRight"])
}

func (c *current) onNotListOfValues2(partial interface{}) (interface{}, error) {
	partialNode, _ := partial.(INode)
	if partialNode != nil && partialNode.GetType() == TypeCursor {
		cursorNode := partialNode.(*CursorNode)
		clonedNode := cursorNode.Copy()
		clonedNode.SetSuggestionTypes([]string{"value"})
		return clonedNode, nil
	}
	partialFn, _ := partial.(func(field INode) INode)
	if partialFn == nil {
		return nil, errors.New("invalid fn")
	}
	fn := func(field INode) INode {
		res := partialFn(field)
		return NewFunctionNot(res)
	}
	return fn, nil
	/*
	   if partial.kind == "cursor" {
	     return {
	       ...list,
	       suggestionTypes: ["value"]
	     }
	   }
	   return (field) => buildFunctionNode("not", [partial(field)])
	*/

}

func (p *parser) callonNotListOfValues2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onNotListOfValues2(stack["partial"])
}

func (c *current) onValue2(value interface{}) (interface{}, error) {
	valueNode, _ := value.(INode)
	if valueNode != nil && valueNode.GetType() == TypeCursor {
		return valueNode, nil
	}
	fn := func(fieldNode INode) INode {
		isPhraseNode := NewLiteralNode(true)
		return NewFunctionIs(fieldNode, valueNode, isPhraseNode)
	}
	return fn, nil
	/*
	   if value.kind == "cursor" {
	     return value
	   }
	   const isPhrase = buildLiteralNode(true)
	   return (field) => buildFunctionNode("is", [field, value, isPhrase])
	*/

}

func (p *parser) callonValue2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onValue2(stack["value"])
}

func (c *current) onValue5(value interface{}) (interface{}, error) {
	valueNode, _ := value.(INode)
	if valueNode != nil && valueNode.GetType() == TypeCursor {
		return valueNode, nil
	}

	allowLeadingWildcards := false
	cfg, _ := c.globalStore["config"].(*config.Config)
	if cfg != nil {
		allowLeadingWildcards = cfg.AllowLeadingWildcards
	}

	if !allowLeadingWildcards && valueNode.GetType() == TypeWildcard {
		if node, ok := valueNode.(*WildcardNode); ok && node != nil {
			if node.HasLeadingWildcard() {
				return nil, errors.New("leading wildcards are disabled")
			}
		}
	}

	fn := func(field INode) INode {
		isPhraseNode := NewLiteralNode(nil) // --> prev : false
		return NewFunctionIs(field, valueNode, isPhraseNode)
	}
	return fn, nil

	/*
	   if value.kind == "cursor" {
	     return value
	   }

	   if !allowLeadingWildcards && value.kind == "wildcard" && nodeTypes.wildcard.hasLeadingWildcard(value) {
	     error("Leading wildcards are disabled. See query:allowLeadingWildcards in Advanced Settings.")
	   }

	   const isPhrase = buildLiteralNode(false)
	   return (field) => buildFunctionNode("is", [field, value, isPhrase])
	*/

}

func (p *parser) callonValue5() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onValue5(stack["value"])
}

func (c *current) onOr9() (bool, error) {
	return false, nil /* errors.New("errorOnLuceneSyntax") */
}

func (p *parser) callonOr9() (bool, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onOr9()
}

func (c *current) onAnd9() (bool, error) {
	return false, nil /* errors.New("errorOnLuceneSyntax") */
}

func (p *parser) callonAnd9() (bool, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAnd9()
}

func (c *current) onNot7() (bool, error) {
	return false, nil /* errors.New("errorOnLuceneSyntax") */
}

func (p *parser) callonNot7() (bool, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onNot7()
}

func (c *current) onQuotedString2(prefix, cursor, suffix interface{}) (interface{}, error) {
	prefixString := Concat(prefix)
	cursorString := Concat(cursor)
	suffixString := Concat(suffix)
	textString := string(c.text)
	start := c.pos.offset
	end := start + len(c.text) - len(cursorString)
	cursorNode := NewCursorNode(start, end, prefixString, suffixString, strings.Replace(textString, cursorString, "", 1))
	return cursorNode, nil
	/*
	   const { start, end } = location()
	   return {
	     type: "cursor",
	     start: start.offset,
	     end: end.offset - cursor.length,
	     prefix: prefix.join(''),
	     suffix: suffix.join(''),
	     text: text().replace(cursor, '')
	   }
	*/

}

func (p *parser) callonQuotedString2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onQuotedString2(stack["prefix"], stack["cursor"], stack["suffix"])
}

func (c *current) onQuotedString14(chars interface{}) (interface{}, error) {
	node := NewLiteralNode(Concat(chars))
	return node, nil
	/*
	   return buildLiteralNode(chars.join(''))
	*/

}

func (p *parser) callonQuotedString14() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onQuotedString14(stack["chars"])
}

func (c *current) onQuotedCharacter3(char interface{}) (interface{}, error) {
	return char, nil
}

func (p *parser) callonQuotedCharacter3() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onQuotedCharacter3(stack["char"])
}

func (c *current) onQuotedCharacter8(char interface{}) (interface{}, error) {
	return char, nil
}

func (p *parser) callonQuotedCharacter8() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onQuotedCharacter8(stack["char"])
}

func (c *current) onUnquotedLiteral2(prefix, cursor, suffix interface{}) (interface{}, error) {
	prefixString := Concat(prefix)
	cursorString := Concat(cursor)
	suffixString := Concat(suffix)
	textString := string(c.text)
	start := c.pos.offset
	end := start + len(c.text) - len(cursorString)
	cursorNode := NewCursorNode(start, end, prefixString, suffixString, strings.Replace(textString, cursorString, "", 1))
	return cursorNode, nil
	/*
	   const { start, end } = location()
	   return {
	     type: "cursor",
	     start: start.offset,
	     end: end.offset - cursor.length,
	     prefix: prefix.join(''),
	     suffix: suffix.join(''),
	     text: text().replace(cursor, '')
	   }
	*/

}

func (p *parser) callonUnquotedLiteral2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onUnquotedLiteral2(stack["prefix"], stack["cursor"], stack["suffix"])
}

func (c *current) onUnquotedLiteral12(chars interface{}) (interface{}, error) {
	sequence := Trim(Concat(chars))
	switch sequence {
	case "null":
		return NewLiteralNode(nil), nil
	case "true":
		return NewLiteralNode(true), nil
	case "false":
		return NewLiteralNode(false), nil
	}
	if strings.Contains(sequence, WildcardSymbol) {
		return NewWildcardNode(sequence), nil
	}

	if s, err := strconv.ParseFloat(sequence, 64); err == nil {
		return NewLiteralNode(s), nil
	}
	return NewLiteralNode(sequence), nil
	/*
	   const sequence = chars.join('').trim()
	   if (sequence == "null") return buildLiteralNode(nil)
	   if (sequence == "true") return buildLiteralNode(true)
	   if (sequence == "false") return buildLiteralNode(false)
	   if (chars.includes(wildcardSymbol)) return buildWildcardNode(sequence)
	   const number = Number(sequence)
	   const value = isNaN(number) ? sequence : number
	   return buildLiteralNode(value)
	*/

}

func (p *parser) callonUnquotedLiteral12() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onUnquotedLiteral12(stack["chars"])
}

func (c *current) onUnquotedCharacter6(char interface{}) (interface{}, error) {
	return char, nil
}

func (p *parser) callonUnquotedCharacter6() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onUnquotedCharacter6(stack["char"])
}

func (c *current) onWildcard1() (interface{}, error) {
	return WildcardSymbol, nil
}

func (p *parser) callonWildcard1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onWildcard1()
}

func (c *current) onOptionalSpace2(prefix, cursor, suffix interface{}) (interface{}, error) {
	prefixString := Concat(prefix)
	cursorString := Concat(cursor)
	suffixString := Concat(suffix)
	textString := string(c.text)
	start := c.pos.offset
	end := start + len(c.text) - len(cursorString)
	cursorNode := NewCursorNode(start, end, prefixString, suffixString, strings.Replace(textString, cursorString, "", 1))
	return cursorNode, nil
	/*
	   const { start, end } = location()
	   return {
	     type: "cursor",
	     start: start.offset,
	     end: end.offset - cursor.length,
	     prefix: prefix.join(""),
	     suffix: suffix.join(""),
	     text: text().replace(cursor, "")
	   }
	*/

}

func (p *parser) callonOptionalSpace2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onOptionalSpace2(stack["prefix"], stack["cursor"], stack["suffix"])
}

func (c *current) onEscapedWhitespace2() (interface{}, error) {
	return "\t", nil
}

func (p *parser) callonEscapedWhitespace2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onEscapedWhitespace2()
}

func (c *current) onEscapedWhitespace4() (interface{}, error) {
	return "\r", nil
}

func (p *parser) callonEscapedWhitespace4() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onEscapedWhitespace4()
}

func (c *current) onEscapedWhitespace6() (interface{}, error) {
	return "\n", nil
}

func (p *parser) callonEscapedWhitespace6() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onEscapedWhitespace6()
}

func (c *current) onEscapedSpecialCharacter1(char interface{}) (interface{}, error) {
	return char, nil
}

func (p *parser) callonEscapedSpecialCharacter1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onEscapedSpecialCharacter1(stack["char"])
}

func (c *current) onEscapedKeyword1(keyword interface{}) (interface{}, error) {
	return keyword, nil
}

func (p *parser) callonEscapedKeyword1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onEscapedKeyword1(stack["keyword"])
}

func (c *current) onRangeOperator2() (interface{}, error) {
	return "lte", nil
}

func (p *parser) callonRangeOperator2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onRangeOperator2()
}

func (c *current) onRangeOperator4() (interface{}, error) {
	return "gte", nil
}

func (p *parser) callonRangeOperator4() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onRangeOperator4()
}

func (c *current) onRangeOperator6() (interface{}, error) {
	return "lt", nil
}

func (p *parser) callonRangeOperator6() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onRangeOperator6()
}

func (c *current) onRangeOperator8() (interface{}, error) {
	return "gt", nil
}

func (p *parser) callonRangeOperator8() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onRangeOperator8()
}

func (c *current) onCursor3() (bool, error) {
	cfg, _ := c.globalStore["config"].(*config.Config)
	if cfg != nil {
		return cfg.ParseCursor, nil
	}
	return false, nil

}

func (p *parser) callonCursor3() (bool, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onCursor3()
}

func (c *current) onCursor1() (interface{}, error) {
	cfg, _ := c.globalStore["config"].(*config.Config)
	if cfg != nil {
		return cfg.CursorSymbol, nil
	}
	return nil, nil
	/* return cursorSymbol */

}

func (p *parser) callonCursor1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onCursor1()
}

func (c *current) onLuceneOr1() (interface{}, error) {
	return nil, errors.New("luceneOr")
	//error("LuceneOr")

}

func (p *parser) callonLuceneOr1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onLuceneOr1()
}

func (c *current) onLuceneAnd2() (interface{}, error) {
	return nil, errors.New("luceneAnd")
	//error("LuceneAnd")

}

func (p *parser) callonLuceneAnd2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onLuceneAnd2()
}

func (c *current) onLuceneAnd9() (interface{}, error) {
	return nil, errors.New("luceneAnd")
	//error("LuceneAnd")

}

func (p *parser) callonLuceneAnd9() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onLuceneAnd9()
}

func (c *current) onLuceneNot2() (interface{}, error) {
	return nil, errors.New("luceneNot")
	//error("LuceneNot")

}

func (p *parser) callonLuceneNot2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onLuceneNot2()
}

func (c *current) onLuceneNot4() (interface{}, error) {
	return nil, errors.New("luceneNot")
	//error("LuceneNot")

}

func (p *parser) callonLuceneNot4() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onLuceneNot4()
}

func (c *current) onLuceneExists1() (interface{}, error) {
	return nil, errors.New("luceneExists")
	//error("LuceneExists")

}

func (p *parser) callonLuceneExists1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onLuceneExists1()
}

func (c *current) onLuceneRange2() (interface{}, error) {
	return nil, errors.New("luceneRange")
	//error("LuceneRange")

}

func (p *parser) callonLuceneRange2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onLuceneRange2()
}

func (c *current) onLuceneRange8() (interface{}, error) {
	return nil, errors.New("luceneRange")
	//error("LuceneRange")

}

func (p *parser) callonLuceneRange8() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onLuceneRange8()
}

func (c *current) onLuceneWildcard1() (interface{}, error) {
	return nil, errors.New("luceneWildcard")
	//error("LuceneWildcard")

}

func (p *parser) callonLuceneWildcard1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onLuceneWildcard1()
}

func (c *current) onLuceneRegex1() (interface{}, error) {
	return nil, errors.New("luceneRegex")
	//error("LuceneRegex")

}

func (p *parser) callonLuceneRegex1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onLuceneRegex1()
}

func (c *current) onLuceneFuzzy1() (interface{}, error) {
	return nil, errors.New("luceneFuzzy")
	//error("LuceneFuzzy")

}

func (p *parser) callonLuceneFuzzy1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onLuceneFuzzy1()
}

func (c *current) onLuceneProximity1() (interface{}, error) {
	return nil, errors.New("LuceneProximity")
	//error('LuceneProximity')

}

func (p *parser) callonLuceneProximity1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onLuceneProximity1()
}

func (c *current) onLuceneBoost1() (interface{}, error) {
	return nil, errors.New("LuceneBoost")
	//error("LuceneBoost")

}

func (p *parser) callonLuceneBoost1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onLuceneBoost1()
}

func (c *current) onEscapedLuceneSpecialCharacter1() (interface{}, error) {
	//TODO
	return c.text, nil

	/* return char */

}

func (p *parser) callonEscapedLuceneSpecialCharacter1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onEscapedLuceneSpecialCharacter1()
}

var (
	// errNoRule is returned when the grammar to parse has no rule.
	errNoRule = errors.New("grammar has no rule")

	// errInvalidEntrypoint is returned when the specified entrypoint rule
	// does not exit.
	errInvalidEntrypoint = errors.New("invalid entrypoint")

	// errInvalidEncoding is returned when the source is not properly
	// utf8-encoded.
	errInvalidEncoding = errors.New("invalid encoding")

	// errMaxExprCnt is used to signal that the maximum number of
	// expressions have been parsed.
	errMaxExprCnt = errors.New("max number of expresssions parsed")
)

// Option is a function that can set an option on the parser. It returns
// the previous setting as an Option.
type Option func(*parser) Option

// MaxExpressions creates an Option to stop parsing after the provided
// number of expressions have been parsed, if the value is 0 then the parser will
// parse for as many steps as needed (possibly an infinite number).
//
// The default for maxExprCnt is 0.
func MaxExpressions(maxExprCnt uint64) Option {
	return func(p *parser) Option {
		oldMaxExprCnt := p.maxExprCnt
		p.maxExprCnt = maxExprCnt
		return MaxExpressions(oldMaxExprCnt)
	}
}

// Entrypoint creates an Option to set the rule name to use as entrypoint.
// The rule name must have been specified in the -alternate-entrypoints
// if generating the parser with the -optimize-grammar flag, otherwise
// it may have been optimized out. Passing an empty string sets the
// entrypoint to the first rule in the grammar.
//
// The default is to start parsing at the first rule in the grammar.
func Entrypoint(ruleName string) Option {
	return func(p *parser) Option {
		oldEntrypoint := p.entrypoint
		p.entrypoint = ruleName
		if ruleName == "" {
			p.entrypoint = g.rules[0].name
		}
		return Entrypoint(oldEntrypoint)
	}
}

// Statistics adds a user provided Stats struct to the parser to allow
// the user to process the results after the parsing has finished.
// Also the key for the "no match" counter is set.
//
// Example usage:
//
//     input := "input"
//     stats := Stats{}
//     _, err := Parse("input-file", []byte(input), Statistics(&stats, "no match"))
//     if err != nil {
//         log.Panicln(err)
//     }
//     b, err := json.MarshalIndent(stats.ChoiceAltCnt, "", "  ")
//     if err != nil {
//         log.Panicln(err)
//     }
//     fmt.Println(string(b))
//
func Statistics(stats *Stats, choiceNoMatch string) Option {
	return func(p *parser) Option {
		oldStats := p.Stats
		p.Stats = stats
		oldChoiceNoMatch := p.choiceNoMatch
		p.choiceNoMatch = choiceNoMatch
		if p.Stats.ChoiceAltCnt == nil {
			p.Stats.ChoiceAltCnt = make(map[string]map[string]int)
		}
		return Statistics(oldStats, oldChoiceNoMatch)
	}
}

// Debug creates an Option to set the debug flag to b. When set to true,
// debugging information is printed to stdout while parsing.
//
// The default is false.
func Debug(b bool) Option {
	return func(p *parser) Option {
		old := p.debug
		p.debug = b
		return Debug(old)
	}
}

// Memoize creates an Option to set the memoize flag to b. When set to true,
// the parser will cache all results so each expression is evaluated only
// once. This guarantees linear parsing time even for pathological cases,
// at the expense of more memory and slower times for typical cases.
//
// The default is false.
func Memoize(b bool) Option {
	return func(p *parser) Option {
		old := p.memoize
		p.memoize = b
		return Memoize(old)
	}
}

// AllowInvalidUTF8 creates an Option to allow invalid UTF-8 bytes.
// Every invalid UTF-8 byte is treated as a utf8.RuneError (U+FFFD)
// by character class matchers and is matched by the any matcher.
// The returned matched value, c.text and c.offset are NOT affected.
//
// The default is false.
func AllowInvalidUTF8(b bool) Option {
	return func(p *parser) Option {
		old := p.allowInvalidUTF8
		p.allowInvalidUTF8 = b
		return AllowInvalidUTF8(old)
	}
}

// Recover creates an Option to set the recover flag to b. When set to
// true, this causes the parser to recover from panics and convert it
// to an error. Setting it to false can be useful while debugging to
// access the full stack trace.
//
// The default is true.
func Recover(b bool) Option {
	return func(p *parser) Option {
		old := p.recover
		p.recover = b
		return Recover(old)
	}
}

// GlobalStore creates an Option to set a key to a certain value in
// the globalStore.
func GlobalStore(key string, value interface{}) Option {
	return func(p *parser) Option {
		old := p.cur.globalStore[key]
		p.cur.globalStore[key] = value
		return GlobalStore(key, old)
	}
}

// InitState creates an Option to set a key to a certain value in
// the global "state" store.
func InitState(key string, value interface{}) Option {
	return func(p *parser) Option {
		old := p.cur.state[key]
		p.cur.state[key] = value
		return InitState(key, old)
	}
}

// ParseFile parses the file identified by filename.
func ParseFile(filename string, opts ...Option) (i interface{}, err error) {
	f, err := os.Open(filename)
	if err != nil {
		return nil, err
	}
	defer func() {
		if closeErr := f.Close(); closeErr != nil {
			err = closeErr
		}
	}()
	return ParseReader(filename, f, opts...)
}

// ParseReader parses the data from r using filename as information in the
// error messages.
func ParseReader(filename string, r io.Reader, opts ...Option) (interface{}, error) {
	b, err := ioutil.ReadAll(r)
	if err != nil {
		return nil, err
	}

	return Parse(filename, b, opts...)
}

// Parse parses the data from b using filename as information in the
// error messages.
func Parse(filename string, b []byte, opts ...Option) (interface{}, error) {
	return newParser(filename, b, opts...).parse(g)
}

// position records a position in the text.
type position struct {
	line, col, offset int
}

func (p position) String() string {
	return strconv.Itoa(p.line) + ":" + strconv.Itoa(p.col) + " [" + strconv.Itoa(p.offset) + "]"
}

// savepoint stores all state required to go back to this point in the
// parser.
type savepoint struct {
	position
	rn rune
	w  int
}

type current struct {
	pos  position // start position of the match
	text []byte   // raw text of the match

	// state is a store for arbitrary key,value pairs that the user wants to be
	// tied to the backtracking of the parser.
	// This is always rolled back if a parsing rule fails.
	state storeDict

	// globalStore is a general store for the user to store arbitrary key-value
	// pairs that they need to manage and that they do not want tied to the
	// backtracking of the parser. This is only modified by the user and never
	// rolled back by the parser. It is always up to the user to keep this in a
	// consistent state.
	globalStore storeDict
}

type storeDict map[string]interface{}

// the AST types...

type grammar struct {
	pos   position
	rules []*rule
}

type rule struct {
	pos         position
	name        string
	displayName string
	expr        interface{}
}

type choiceExpr struct {
	pos          position
	alternatives []interface{}
}

type actionExpr struct {
	pos  position
	expr interface{}
	run  func(*parser) (interface{}, error)
}

type recoveryExpr struct {
	pos          position
	expr         interface{}
	recoverExpr  interface{}
	failureLabel []string
}

type seqExpr struct {
	pos   position
	exprs []interface{}
}

type throwExpr struct {
	pos   position
	label string
}

type labeledExpr struct {
	pos   position
	label string
	expr  interface{}
}

type expr struct {
	pos  position
	expr interface{}
}

type andExpr expr
type notExpr expr
type zeroOrOneExpr expr
type zeroOrMoreExpr expr
type oneOrMoreExpr expr

type ruleRefExpr struct {
	pos  position
	name string
}

type stateCodeExpr struct {
	pos position
	run func(*parser) error
}

type andCodeExpr struct {
	pos position
	run func(*parser) (bool, error)
}

type notCodeExpr struct {
	pos position
	run func(*parser) (bool, error)
}

type litMatcher struct {
	pos        position
	val        string
	ignoreCase bool
	want       string
}

type charClassMatcher struct {
	pos             position
	val             string
	basicLatinChars [128]bool
	chars           []rune
	ranges          []rune
	classes         []*unicode.RangeTable
	ignoreCase      bool
	inverted        bool
}

type anyMatcher position

// errList cumulates the errors found by the parser.
type errList []error

func (e *errList) add(err error) {
	*e = append(*e, err)
}

func (e errList) err() error {
	if len(e) == 0 {
		return nil
	}
	e.dedupe()
	return e
}

func (e *errList) dedupe() {
	var cleaned []error
	set := make(map[string]bool)
	for _, err := range *e {
		if msg := err.Error(); !set[msg] {
			set[msg] = true
			cleaned = append(cleaned, err)
		}
	}
	*e = cleaned
}

func (e errList) Error() string {
	switch len(e) {
	case 0:
		return ""
	case 1:
		return e[0].Error()
	default:
		var buf bytes.Buffer

		for i, err := range e {
			if i > 0 {
				buf.WriteRune('\n')
			}
			buf.WriteString(err.Error())
		}
		return buf.String()
	}
}

// parserError wraps an error with a prefix indicating the rule in which
// the error occurred. The original error is stored in the Inner field.
type parserError struct {
	Inner    error
	pos      position
	prefix   string
	expected []string
}

// Error returns the error message.
func (p *parserError) Error() string {
	return p.prefix + ": " + p.Inner.Error()
}

// newParser creates a parser with the specified input source and options.
func newParser(filename string, b []byte, opts ...Option) *parser {
	stats := Stats{
		ChoiceAltCnt: make(map[string]map[string]int),
	}

	p := &parser{
		filename: filename,
		errs:     new(errList),
		data:     b,
		pt:       savepoint{position: position{line: 1}},
		recover:  true,
		cur: current{
			state:       make(storeDict),
			globalStore: make(storeDict),
		},
		maxFailPos:      position{col: 1, line: 1},
		maxFailExpected: make([]string, 0, 20),
		Stats:           &stats,
		// start rule is rule [0] unless an alternate entrypoint is specified
		entrypoint: g.rules[0].name,
	}
	p.setOptions(opts)

	if p.maxExprCnt == 0 {
		p.maxExprCnt = math.MaxUint64
	}

	return p
}

// setOptions applies the options to the parser.
func (p *parser) setOptions(opts []Option) {
	for _, opt := range opts {
		opt(p)
	}
}

type resultTuple struct {
	v   interface{}
	b   bool
	end savepoint
}

const choiceNoMatch = -1

// Stats stores some statistics, gathered during parsing
type Stats struct {
	// ExprCnt counts the number of expressions processed during parsing
	// This value is compared to the maximum number of expressions allowed
	// (set by the MaxExpressions option).
	ExprCnt uint64

	// ChoiceAltCnt is used to count for each ordered choice expression,
	// which alternative is used how may times.
	// These numbers allow to optimize the order of the ordered choice expression
	// to increase the performance of the parser
	//
	// The outer key of ChoiceAltCnt is composed of the name of the rule as well
	// as the line and the column of the ordered choice.
	// The inner key of ChoiceAltCnt is the number (one-based) of the matching alternative.
	// For each alternative the number of matches are counted. If an ordered choice does not
	// match, a special counter is incremented. The name of this counter is set with
	// the parser option Statistics.
	// For an alternative to be included in ChoiceAltCnt, it has to match at least once.
	ChoiceAltCnt map[string]map[string]int
}

type parser struct {
	filename string
	pt       savepoint
	cur      current

	data []byte
	errs *errList

	depth   int
	recover bool
	debug   bool

	memoize bool
	// memoization table for the packrat algorithm:
	// map[offset in source] map[expression or rule] {value, match}
	memo map[int]map[interface{}]resultTuple

	// rules table, maps the rule identifier to the rule node
	rules map[string]*rule
	// variables stack, map of label to value
	vstack []map[string]interface{}
	// rule stack, allows identification of the current rule in errors
	rstack []*rule

	// parse fail
	maxFailPos            position
	maxFailExpected       []string
	maxFailInvertExpected bool

	// max number of expressions to be parsed
	maxExprCnt uint64
	// entrypoint for the parser
	entrypoint string

	allowInvalidUTF8 bool

	*Stats

	choiceNoMatch string
	// recovery expression stack, keeps track of the currently available recovery expression, these are traversed in reverse
	recoveryStack []map[string]interface{}
}

// push a variable set on the vstack.
func (p *parser) pushV() {
	if cap(p.vstack) == len(p.vstack) {
		// create new empty slot in the stack
		p.vstack = append(p.vstack, nil)
	} else {
		// slice to 1 more
		p.vstack = p.vstack[:len(p.vstack)+1]
	}

	// get the last args set
	m := p.vstack[len(p.vstack)-1]
	if m != nil && len(m) == 0 {
		// empty map, all good
		return
	}

	m = make(map[string]interface{})
	p.vstack[len(p.vstack)-1] = m
}

// pop a variable set from the vstack.
func (p *parser) popV() {
	// if the map is not empty, clear it
	m := p.vstack[len(p.vstack)-1]
	if len(m) > 0 {
		// GC that map
		p.vstack[len(p.vstack)-1] = nil
	}
	p.vstack = p.vstack[:len(p.vstack)-1]
}

// push a recovery expression with its labels to the recoveryStack
func (p *parser) pushRecovery(labels []string, expr interface{}) {
	if cap(p.recoveryStack) == len(p.recoveryStack) {
		// create new empty slot in the stack
		p.recoveryStack = append(p.recoveryStack, nil)
	} else {
		// slice to 1 more
		p.recoveryStack = p.recoveryStack[:len(p.recoveryStack)+1]
	}

	m := make(map[string]interface{}, len(labels))
	for _, fl := range labels {
		m[fl] = expr
	}
	p.recoveryStack[len(p.recoveryStack)-1] = m
}

// pop a recovery expression from the recoveryStack
func (p *parser) popRecovery() {
	// GC that map
	p.recoveryStack[len(p.recoveryStack)-1] = nil

	p.recoveryStack = p.recoveryStack[:len(p.recoveryStack)-1]
}

func (p *parser) print(prefix, s string) string {
	if !p.debug {
		return s
	}

	fmt.Printf("%s %d:%d:%d: %s [%#U]\n",
		prefix, p.pt.line, p.pt.col, p.pt.offset, s, p.pt.rn)
	return s
}

func (p *parser) in(s string) string {
	p.depth++
	return p.print(strings.Repeat(" ", p.depth)+">", s)
}

func (p *parser) out(s string) string {
	p.depth--
	return p.print(strings.Repeat(" ", p.depth)+"<", s)
}

func (p *parser) addErr(err error) {
	p.addErrAt(err, p.pt.position, []string{})
}

func (p *parser) addErrAt(err error, pos position, expected []string) {
	var buf bytes.Buffer
	if p.filename != "" {
		buf.WriteString(p.filename)
	}
	if buf.Len() > 0 {
		buf.WriteString(":")
	}
	buf.WriteString(fmt.Sprintf("%d:%d (%d)", pos.line, pos.col, pos.offset))
	if len(p.rstack) > 0 {
		if buf.Len() > 0 {
			buf.WriteString(": ")
		}
		rule := p.rstack[len(p.rstack)-1]
		if rule.displayName != "" {
			buf.WriteString("rule " + rule.displayName)
		} else {
			buf.WriteString("rule " + rule.name)
		}
	}
	pe := &parserError{Inner: err, pos: pos, prefix: buf.String(), expected: expected}
	p.errs.add(pe)
}

func (p *parser) failAt(fail bool, pos position, want string) {
	// process fail if parsing fails and not inverted or parsing succeeds and invert is set
	if fail == p.maxFailInvertExpected {
		if pos.offset < p.maxFailPos.offset {
			return
		}

		if pos.offset > p.maxFailPos.offset {
			p.maxFailPos = pos
			p.maxFailExpected = p.maxFailExpected[:0]
		}

		if p.maxFailInvertExpected {
			want = "!" + want
		}
		p.maxFailExpected = append(p.maxFailExpected, want)
	}
}

// read advances the parser to the next rune.
func (p *parser) read() {
	p.pt.offset += p.pt.w
	rn, n := utf8.DecodeRune(p.data[p.pt.offset:])
	p.pt.rn = rn
	p.pt.w = n
	p.pt.col++
	if rn == '\n' {
		p.pt.line++
		p.pt.col = 0
	}

	if rn == utf8.RuneError && n == 1 { // see utf8.DecodeRune
		if !p.allowInvalidUTF8 {
			p.addErr(errInvalidEncoding)
		}
	}
}

// restore parser position to the savepoint pt.
func (p *parser) restore(pt savepoint) {
	if p.debug {
		defer p.out(p.in("restore"))
	}
	if pt.offset == p.pt.offset {
		return
	}
	p.pt = pt
}

// Cloner is implemented by any value that has a Clone method, which returns a
// copy of the value. This is mainly used for types which are not passed by
// value (e.g map, slice, chan) or structs that contain such types.
//
// This is used in conjunction with the global state feature to create proper
// copies of the state to allow the parser to properly restore the state in
// the case of backtracking.
type Cloner interface {
	Clone() interface{}
}

var statePool = &sync.Pool{
	New: func() interface{} { return make(storeDict) },
}

func (sd storeDict) Discard() {
	for k := range sd {
		delete(sd, k)
	}
	statePool.Put(sd)
}

// clone and return parser current state.
func (p *parser) cloneState() storeDict {
	if p.debug {
		defer p.out(p.in("cloneState"))
	}

	state := statePool.Get().(storeDict)
	for k, v := range p.cur.state {
		if c, ok := v.(Cloner); ok {
			state[k] = c.Clone()
		} else {
			state[k] = v
		}
	}
	return state
}

// restore parser current state to the state storeDict.
// every restoreState should applied only one time for every cloned state
func (p *parser) restoreState(state storeDict) {
	if p.debug {
		defer p.out(p.in("restoreState"))
	}
	p.cur.state.Discard()
	p.cur.state = state
}

// get the slice of bytes from the savepoint start to the current position.
func (p *parser) sliceFrom(start savepoint) []byte {
	return p.data[start.position.offset:p.pt.position.offset]
}

func (p *parser) getMemoized(node interface{}) (resultTuple, bool) {
	if len(p.memo) == 0 {
		return resultTuple{}, false
	}
	m := p.memo[p.pt.offset]
	if len(m) == 0 {
		return resultTuple{}, false
	}
	res, ok := m[node]
	return res, ok
}

func (p *parser) setMemoized(pt savepoint, node interface{}, tuple resultTuple) {
	if p.memo == nil {
		p.memo = make(map[int]map[interface{}]resultTuple)
	}
	m := p.memo[pt.offset]
	if m == nil {
		m = make(map[interface{}]resultTuple)
		p.memo[pt.offset] = m
	}
	m[node] = tuple
}

func (p *parser) buildRulesTable(g *grammar) {
	p.rules = make(map[string]*rule, len(g.rules))
	for _, r := range g.rules {
		p.rules[r.name] = r
	}
}

func (p *parser) parse(g *grammar) (val interface{}, err error) {
	if len(g.rules) == 0 {
		p.addErr(errNoRule)
		return nil, p.errs.err()
	}

	// TODO : not super critical but this could be generated
	p.buildRulesTable(g)

	if p.recover {
		// panic can be used in action code to stop parsing immediately
		// and return the panic as an error.
		defer func() {
			if e := recover(); e != nil {
				if p.debug {
					defer p.out(p.in("panic handler"))
				}
				val = nil
				switch e := e.(type) {
				case error:
					p.addErr(e)
				default:
					p.addErr(fmt.Errorf("%v", e))
				}
				err = p.errs.err()
			}
		}()
	}

	startRule, ok := p.rules[p.entrypoint]
	if !ok {
		p.addErr(errInvalidEntrypoint)
		return nil, p.errs.err()
	}

	p.read() // advance to first rune
	val, ok = p.parseRule(startRule)
	if !ok {
		if len(*p.errs) == 0 {
			// If parsing fails, but no errors have been recorded, the expected values
			// for the farthest parser position are returned as error.
			maxFailExpectedMap := make(map[string]struct{}, len(p.maxFailExpected))
			for _, v := range p.maxFailExpected {
				maxFailExpectedMap[v] = struct{}{}
			}
			expected := make([]string, 0, len(maxFailExpectedMap))
			eof := false
			if _, ok := maxFailExpectedMap["!."]; ok {
				delete(maxFailExpectedMap, "!.")
				eof = true
			}
			for k := range maxFailExpectedMap {
				expected = append(expected, k)
			}
			sort.Strings(expected)
			if eof {
				expected = append(expected, "EOF")
			}
			p.addErrAt(errors.New("no match found, expected: "+listJoin(expected, ", ", "or")), p.maxFailPos, expected)
		}

		return nil, p.errs.err()
	}
	return val, p.errs.err()
}

func listJoin(list []string, sep string, lastSep string) string {
	switch len(list) {
	case 0:
		return ""
	case 1:
		return list[0]
	default:
		return strings.Join(list[:len(list)-1], sep) + " " + lastSep + " " + list[len(list)-1]
	}
}

func (p *parser) parseRule(rule *rule) (interface{}, bool) {
	if p.debug {
		defer p.out(p.in("parseRule " + rule.name))
	}

	if p.memoize {
		res, ok := p.getMemoized(rule)
		if ok {
			p.restore(res.end)
			return res.v, res.b
		}
	}

	start := p.pt
	p.rstack = append(p.rstack, rule)
	p.pushV()
	val, ok := p.parseExpr(rule.expr)
	p.popV()
	p.rstack = p.rstack[:len(p.rstack)-1]
	if ok && p.debug {
		p.print(strings.Repeat(" ", p.depth)+"MATCH", string(p.sliceFrom(start)))
	}

	if p.memoize {
		p.setMemoized(start, rule, resultTuple{val, ok, p.pt})
	}
	return val, ok
}

func (p *parser) parseExpr(expr interface{}) (interface{}, bool) {
	var pt savepoint

	if p.memoize {
		res, ok := p.getMemoized(expr)
		if ok {
			p.restore(res.end)
			return res.v, res.b
		}
		pt = p.pt
	}

	p.ExprCnt++
	if p.ExprCnt > p.maxExprCnt {
		panic(errMaxExprCnt)
	}

	var val interface{}
	var ok bool
	switch expr := expr.(type) {
	case *actionExpr:
		val, ok = p.parseActionExpr(expr)
	case *andCodeExpr:
		val, ok = p.parseAndCodeExpr(expr)
	case *andExpr:
		val, ok = p.parseAndExpr(expr)
	case *anyMatcher:
		val, ok = p.parseAnyMatcher(expr)
	case *charClassMatcher:
		val, ok = p.parseCharClassMatcher(expr)
	case *choiceExpr:
		val, ok = p.parseChoiceExpr(expr)
	case *labeledExpr:
		val, ok = p.parseLabeledExpr(expr)
	case *litMatcher:
		val, ok = p.parseLitMatcher(expr)
	case *notCodeExpr:
		val, ok = p.parseNotCodeExpr(expr)
	case *notExpr:
		val, ok = p.parseNotExpr(expr)
	case *oneOrMoreExpr:
		val, ok = p.parseOneOrMoreExpr(expr)
	case *recoveryExpr:
		val, ok = p.parseRecoveryExpr(expr)
	case *ruleRefExpr:
		val, ok = p.parseRuleRefExpr(expr)
	case *seqExpr:
		val, ok = p.parseSeqExpr(expr)
	case *stateCodeExpr:
		val, ok = p.parseStateCodeExpr(expr)
	case *throwExpr:
		val, ok = p.parseThrowExpr(expr)
	case *zeroOrMoreExpr:
		val, ok = p.parseZeroOrMoreExpr(expr)
	case *zeroOrOneExpr:
		val, ok = p.parseZeroOrOneExpr(expr)
	default:
		panic(fmt.Sprintf("unknown expression type %T", expr))
	}
	if p.memoize {
		p.setMemoized(pt, expr, resultTuple{val, ok, p.pt})
	}
	return val, ok
}

func (p *parser) parseActionExpr(act *actionExpr) (interface{}, bool) {
	if p.debug {
		defer p.out(p.in("parseActionExpr"))
	}

	start := p.pt
	val, ok := p.parseExpr(act.expr)
	if ok {
		p.cur.pos = start.position
		p.cur.text = p.sliceFrom(start)
		state := p.cloneState()
		actVal, err := act.run(p)
		if err != nil {
			p.addErrAt(err, start.position, []string{})
		}
		p.restoreState(state)

		val = actVal
	}
	if ok && p.debug {
		p.print(strings.Repeat(" ", p.depth)+"MATCH", string(p.sliceFrom(start)))
	}
	return val, ok
}

func (p *parser) parseAndCodeExpr(and *andCodeExpr) (interface{}, bool) {
	if p.debug {
		defer p.out(p.in("parseAndCodeExpr"))
	}

	state := p.cloneState()

	ok, err := and.run(p)
	if err != nil {
		p.addErr(err)
	}
	p.restoreState(state)

	return nil, ok
}

func (p *parser) parseAndExpr(and *andExpr) (interface{}, bool) {
	if p.debug {
		defer p.out(p.in("parseAndExpr"))
	}

	pt := p.pt
	state := p.cloneState()
	p.pushV()
	_, ok := p.parseExpr(and.expr)
	p.popV()
	p.restoreState(state)
	p.restore(pt)

	return nil, ok
}

func (p *parser) parseAnyMatcher(any *anyMatcher) (interface{}, bool) {
	if p.debug {
		defer p.out(p.in("parseAnyMatcher"))
	}

	if p.pt.rn == utf8.RuneError && p.pt.w == 0 {
		// EOF - see utf8.DecodeRune
		p.failAt(false, p.pt.position, ".")
		return nil, false
	}
	start := p.pt
	p.read()
	p.failAt(true, start.position, ".")
	return p.sliceFrom(start), true
}

func (p *parser) parseCharClassMatcher(chr *charClassMatcher) (interface{}, bool) {
	if p.debug {
		defer p.out(p.in("parseCharClassMatcher"))
	}

	cur := p.pt.rn
	start := p.pt

	// can't match EOF
	if cur == utf8.RuneError && p.pt.w == 0 { // see utf8.DecodeRune
		p.failAt(false, start.position, chr.val)
		return nil, false
	}

	if chr.ignoreCase {
		cur = unicode.ToLower(cur)
	}

	// try to match in the list of available chars
	for _, rn := range chr.chars {
		if rn == cur {
			if chr.inverted {
				p.failAt(false, start.position, chr.val)
				return nil, false
			}
			p.read()
			p.failAt(true, start.position, chr.val)
			return p.sliceFrom(start), true
		}
	}

	// try to match in the list of ranges
	for i := 0; i < len(chr.ranges); i += 2 {
		if cur >= chr.ranges[i] && cur <= chr.ranges[i+1] {
			if chr.inverted {
				p.failAt(false, start.position, chr.val)
				return nil, false
			}
			p.read()
			p.failAt(true, start.position, chr.val)
			return p.sliceFrom(start), true
		}
	}

	// try to match in the list of Unicode classes
	for _, cl := range chr.classes {
		if unicode.Is(cl, cur) {
			if chr.inverted {
				p.failAt(false, start.position, chr.val)
				return nil, false
			}
			p.read()
			p.failAt(true, start.position, chr.val)
			return p.sliceFrom(start), true
		}
	}

	if chr.inverted {
		p.read()
		p.failAt(true, start.position, chr.val)
		return p.sliceFrom(start), true
	}
	p.failAt(false, start.position, chr.val)
	return nil, false
}

func (p *parser) incChoiceAltCnt(ch *choiceExpr, altI int) {
	choiceIdent := fmt.Sprintf("%s %d:%d", p.rstack[len(p.rstack)-1].name, ch.pos.line, ch.pos.col)
	m := p.ChoiceAltCnt[choiceIdent]
	if m == nil {
		m = make(map[string]int)
		p.ChoiceAltCnt[choiceIdent] = m
	}
	// We increment altI by 1, so the keys do not start at 0
	alt := strconv.Itoa(altI + 1)
	if altI == choiceNoMatch {
		alt = p.choiceNoMatch
	}
	m[alt]++
}

func (p *parser) parseChoiceExpr(ch *choiceExpr) (interface{}, bool) {
	if p.debug {
		defer p.out(p.in("parseChoiceExpr"))
	}

	for altI, alt := range ch.alternatives {
		// dummy assignment to prevent compile error if optimized
		_ = altI

		state := p.cloneState()

		p.pushV()
		val, ok := p.parseExpr(alt)
		p.popV()
		if ok {
			p.incChoiceAltCnt(ch, altI)
			return val, ok
		}
		p.restoreState(state)
	}
	p.incChoiceAltCnt(ch, choiceNoMatch)
	return nil, false
}

func (p *parser) parseLabeledExpr(lab *labeledExpr) (interface{}, bool) {
	if p.debug {
		defer p.out(p.in("parseLabeledExpr"))
	}

	p.pushV()
	val, ok := p.parseExpr(lab.expr)
	p.popV()
	if ok && lab.label != "" {
		m := p.vstack[len(p.vstack)-1]
		m[lab.label] = val
	}
	return val, ok
}

func (p *parser) parseLitMatcher(lit *litMatcher) (interface{}, bool) {
	if p.debug {
		defer p.out(p.in("parseLitMatcher"))
	}

	start := p.pt
	for _, want := range lit.val {
		cur := p.pt.rn
		if lit.ignoreCase {
			cur = unicode.ToLower(cur)
		}
		if cur != want {
			p.failAt(false, start.position, lit.want)
			p.restore(start)
			return nil, false
		}
		p.read()
	}
	p.failAt(true, start.position, lit.want)
	return p.sliceFrom(start), true
}

func (p *parser) parseNotCodeExpr(not *notCodeExpr) (interface{}, bool) {
	if p.debug {
		defer p.out(p.in("parseNotCodeExpr"))
	}

	state := p.cloneState()

	ok, err := not.run(p)
	if err != nil {
		p.addErr(err)
	}
	p.restoreState(state)

	return nil, !ok
}

func (p *parser) parseNotExpr(not *notExpr) (interface{}, bool) {
	if p.debug {
		defer p.out(p.in("parseNotExpr"))
	}

	pt := p.pt
	state := p.cloneState()
	p.pushV()
	p.maxFailInvertExpected = !p.maxFailInvertExpected
	_, ok := p.parseExpr(not.expr)
	p.maxFailInvertExpected = !p.maxFailInvertExpected
	p.popV()
	p.restoreState(state)
	p.restore(pt)

	return nil, !ok
}

func (p *parser) parseOneOrMoreExpr(expr *oneOrMoreExpr) (interface{}, bool) {
	if p.debug {
		defer p.out(p.in("parseOneOrMoreExpr"))
	}

	var vals []interface{}

	for {
		p.pushV()
		val, ok := p.parseExpr(expr.expr)
		p.popV()
		if !ok {
			if len(vals) == 0 {
				// did not match once, no match
				return nil, false
			}
			return vals, true
		}
		vals = append(vals, val)
	}
}

func (p *parser) parseRecoveryExpr(recover *recoveryExpr) (interface{}, bool) {
	if p.debug {
		defer p.out(p.in("parseRecoveryExpr (" + strings.Join(recover.failureLabel, ",") + ")"))
	}

	p.pushRecovery(recover.failureLabel, recover.recoverExpr)
	val, ok := p.parseExpr(recover.expr)
	p.popRecovery()

	return val, ok
}

func (p *parser) parseRuleRefExpr(ref *ruleRefExpr) (interface{}, bool) {
	if p.debug {
		defer p.out(p.in("parseRuleRefExpr " + ref.name))
	}

	if ref.name == "" {
		panic(fmt.Sprintf("%s: invalid rule: missing name", ref.pos))
	}

	rule := p.rules[ref.name]
	if rule == nil {
		p.addErr(fmt.Errorf("undefined rule: %s", ref.name))
		return nil, false
	}
	return p.parseRule(rule)
}

func (p *parser) parseSeqExpr(seq *seqExpr) (interface{}, bool) {
	if p.debug {
		defer p.out(p.in("parseSeqExpr"))
	}

	vals := make([]interface{}, 0, len(seq.exprs))

	pt := p.pt
	state := p.cloneState()
	for _, expr := range seq.exprs {
		val, ok := p.parseExpr(expr)
		if !ok {
			p.restoreState(state)
			p.restore(pt)
			return nil, false
		}
		vals = append(vals, val)
	}
	return vals, true
}

func (p *parser) parseStateCodeExpr(state *stateCodeExpr) (interface{}, bool) {
	if p.debug {
		defer p.out(p.in("parseStateCodeExpr"))
	}

	err := state.run(p)
	if err != nil {
		p.addErr(err)
	}
	return nil, true
}

func (p *parser) parseThrowExpr(expr *throwExpr) (interface{}, bool) {
	if p.debug {
		defer p.out(p.in("parseThrowExpr"))
	}

	for i := len(p.recoveryStack) - 1; i >= 0; i-- {
		if recoverExpr, ok := p.recoveryStack[i][expr.label]; ok {
			if val, ok := p.parseExpr(recoverExpr); ok {
				return val, ok
			}
		}
	}

	return nil, false
}

func (p *parser) parseZeroOrMoreExpr(expr *zeroOrMoreExpr) (interface{}, bool) {
	if p.debug {
		defer p.out(p.in("parseZeroOrMoreExpr"))
	}

	var vals []interface{}

	for {
		p.pushV()
		val, ok := p.parseExpr(expr.expr)
		p.popV()
		if !ok {
			return vals, true
		}
		vals = append(vals, val)
	}
}

func (p *parser) parseZeroOrOneExpr(expr *zeroOrOneExpr) (interface{}, bool) {
	if p.debug {
		defer p.out(p.in("parseZeroOrOneExpr"))
	}

	p.pushV()
	val, _ := p.parseExpr(expr.expr)
	p.popV()
	// whether it matched or not, consider it a match
	return val, true
}
